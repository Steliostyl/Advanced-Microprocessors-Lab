
Excercise 1 - Traffic Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  000003ae  00000442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00802804  00802804  00000446  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025e2  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002255  00000000  00000000  00002ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bc  00000000  00000000  00004d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000050d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001206  00000000  00000000  00005138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fa  00000000  00000000  0000633e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00006438  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_29>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a4 e0       	ldi	r26, 0x04	; 4
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a8 30       	cpi	r26, 0x08	; 8
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>

000000ac <__do_copy_data>:
  ac:	18 e2       	ldi	r17, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	ee ea       	ldi	r30, 0xAE	; 174
  b4:	f3 e0       	ldi	r31, 0x03	; 3
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>
  c2:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  c6:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_29>:
int btf;		// Is 1 when big traffic light is on
int sensorData;	/* Data from the small road's traffic sensor. 
				When its value is 0, 5 or 8, it means there's 
				traffic on the small road. */

ISR(PORTF_PORT_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	int intflags = PORTF.INTFLAGS;
  e6:	e0 ea       	ldi	r30, 0xA0	; 160
  e8:	f4 e0       	ldi	r31, 0x04	; 4
  ea:	21 85       	ldd	r18, Z+9	; 0x09
	PORTF.INTFLAGS = intflags;
  ec:	21 87       	std	Z+9, r18	; 0x09
	
	btf = PORTD.OUT % 2;	// Save current status of the Big Road's traffic lights
  ee:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
  f2:	82 2f       	mov	r24, r18
  f4:	81 70       	andi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <__data_end>
  fc:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <__data_end+0x1>

	if (btf){	// Check if the Big Road's traffic light is on
 100:	89 2b       	or	r24, r25
 102:	31 f0       	breq	.+12     	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
		PORTD.OUT = pin0;		// Turn off the Big Road's traffic light
 104:	e0 e6       	ldi	r30, 0x60	; 96
 106:	f4 e0       	ldi	r31, 0x04	; 4
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	84 83       	std	Z+4, r24	; 0x04
		PORTD.OUTCLR = pin2;	// Turn on the Small Road's traffic light
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	86 83       	std	Z+6, r24	; 0x06
	}

	PORTD.OUTCLR = pin1;		// Turn on the Pedestrian traffic light
 110:	e0 e6       	ldi	r30, 0x60	; 96
 112:	f4 e0       	ldi	r31, 0x04	; 4
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	a9 ef       	ldi	r26, 0xF9	; 249
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	11 97       	sbiw	r26, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <__EEPROM_REGION_LENGTH__+0x1c>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__EEPROM_REGION_LENGTH__+0x22>
 122:	00 00       	nop
	_delay_ms(pedTimer);		// Wait a few seconds before turning off the pedestrian's traffic light
	PORTD.OUTSET = pin1;		// Turn off the Pedestrian traffic light
 124:	85 83       	std	Z+5, r24	; 0x05
	
	if (btf){	// If the Big Road's traffic light was on before the interrupt
 126:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
 12a:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <__data_end+0x1>
 12e:	89 2b       	or	r24, r25
 130:	21 f0       	breq	.+8      	; 0x13a <__EEPROM_REGION_LENGTH__+0x3a>
		PORTD.OUTSET = pin2; // Turn off the Small Road's traffic light
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	85 83       	std	Z+5, r24	; 0x05
		PORTD.OUTCLR = pin0; // Turn on the Big Road's traffic light
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	86 83       	std	Z+6, r24	; 0x06
	}
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <main>:

int main(void)
{	
	PORTD.DIR |=  7;	// Pin 0,1,2 = Output
 152:	e0 e6       	ldi	r30, 0x60	; 96
 154:	f4 e0       	ldi	r31, 0x04	; 4
 156:	80 81       	ld	r24, Z
 158:	87 60       	ori	r24, 0x07	; 7
 15a:	80 83       	st	Z, r24
	PORTD.OUT |= 6;		// Initialize traffic lights (Only the Big Road's traffic light is on)
 15c:	84 81       	ldd	r24, Z+4	; 0x04
 15e:	86 60       	ori	r24, 0x06	; 6
 160:	84 83       	std	Z+4, r24	; 0x04
	// Pull-up enable and Interrupt enabled with sense on both edges
	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 162:	e0 ea       	ldi	r30, 0xA0	; 160
 164:	f4 e0       	ldi	r31, 0x04	; 4
 166:	85 89       	ldd	r24, Z+21	; 0x15
 168:	89 60       	ori	r24, 0x09	; 9
 16a:	85 8b       	std	Z+21, r24	; 0x15
	sei();	// Enable interrupts
 16c:	78 94       	sei
	while (1){
		sensorData = rand()%10;	// Change the sensor's data
 16e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <rand>
 172:	6a e0       	ldi	r22, 0x0A	; 10
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__divmodhi4>
 17a:	28 2f       	mov	r18, r24
 17c:	39 2f       	mov	r19, r25
 17e:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <sensorData>
 182:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <sensorData+0x1>
		// If there's traffic on the small road
		if ( (sensorData == 0) || (sensorData == 5) || (sensorData == 8) ){
 186:	21 15       	cp	r18, r1
 188:	31 05       	cpc	r19, r1
 18a:	31 f0       	breq	.+12     	; 0x198 <main+0x46>
 18c:	25 30       	cpi	r18, 0x05	; 5
 18e:	31 05       	cpc	r19, r1
 190:	19 f0       	breq	.+6      	; 0x198 <main+0x46>
 192:	28 30       	cpi	r18, 0x08	; 8
 194:	31 05       	cpc	r19, r1
 196:	59 f7       	brne	.-42     	; 0x16e <main+0x1c>
			PORTD.OUTSET = pin0; // Turn off the Big Road's traffic light
 198:	e0 e6       	ldi	r30, 0x60	; 96
 19a:	f4 e0       	ldi	r31, 0x04	; 4
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	85 83       	std	Z+5, r24	; 0x05
			PORTD.OUTCLR = pin2; // Turn on the Small Road's traffic light
 1a0:	84 e0       	ldi	r24, 0x04	; 4
 1a2:	86 83       	std	Z+6, r24	; 0x06
			do {
				_delay_ms(sensTimer);	// Wait before reading the sensor's data
				sensorData = rand()%10;	// Change the sensor's data
 1a4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <rand>
 1a8:	6a e0       	ldi	r22, 0x0A	; 10
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__divmodhi4>
 1b0:	28 2f       	mov	r18, r24
 1b2:	39 2f       	mov	r19, r25
 1b4:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <sensorData>
 1b8:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <sensorData+0x1>
			} while((sensorData == 0) || (sensorData == 5) || (sensorData == 8));
 1bc:	21 15       	cp	r18, r1
 1be:	31 05       	cpc	r19, r1
 1c0:	89 f3       	breq	.-30     	; 0x1a4 <main+0x52>
 1c2:	25 30       	cpi	r18, 0x05	; 5
 1c4:	31 05       	cpc	r19, r1
 1c6:	71 f3       	breq	.-36     	; 0x1a4 <main+0x52>
 1c8:	28 30       	cpi	r18, 0x08	; 8
 1ca:	31 05       	cpc	r19, r1
 1cc:	59 f3       	breq	.-42     	; 0x1a4 <main+0x52>
			// ^ While there's traffic on the Small Road ^
			
			PORTD.OUTSET = pin2;	// Turn off the Small Road's traffic light
 1ce:	e0 e6       	ldi	r30, 0x60	; 96
 1d0:	f4 e0       	ldi	r31, 0x04	; 4
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	85 83       	std	Z+5, r24	; 0x05
			PORTD.OUTCLR = pin0;	// Turn on the Big Road's traffic light
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	86 83       	std	Z+6, r24	; 0x06
 1da:	c9 cf       	rjmp	.-110    	; 0x16e <main+0x1c>

000001dc <__divmodhi4>:
 1dc:	97 fb       	bst	r25, 7
 1de:	07 2e       	mov	r0, r23
 1e0:	16 f4       	brtc	.+4      	; 0x1e6 <__divmodhi4+0xa>
 1e2:	00 94       	com	r0
 1e4:	07 d0       	rcall	.+14     	; 0x1f4 <__divmodhi4_neg1>
 1e6:	77 fd       	sbrc	r23, 7
 1e8:	09 d0       	rcall	.+18     	; 0x1fc <__divmodhi4_neg2>
 1ea:	0e 94 02 01 	call	0x204	; 0x204 <__udivmodhi4>
 1ee:	07 fc       	sbrc	r0, 7
 1f0:	05 d0       	rcall	.+10     	; 0x1fc <__divmodhi4_neg2>
 1f2:	3e f4       	brtc	.+14     	; 0x202 <__divmodhi4_exit>

000001f4 <__divmodhi4_neg1>:
 1f4:	90 95       	com	r25
 1f6:	81 95       	neg	r24
 1f8:	9f 4f       	sbci	r25, 0xFF	; 255
 1fa:	08 95       	ret

000001fc <__divmodhi4_neg2>:
 1fc:	70 95       	com	r23
 1fe:	61 95       	neg	r22
 200:	7f 4f       	sbci	r23, 0xFF	; 255

00000202 <__divmodhi4_exit>:
 202:	08 95       	ret

00000204 <__udivmodhi4>:
 204:	aa 1b       	sub	r26, r26
 206:	bb 1b       	sub	r27, r27
 208:	51 e1       	ldi	r21, 0x11	; 17
 20a:	07 c0       	rjmp	.+14     	; 0x21a <__udivmodhi4_ep>

0000020c <__udivmodhi4_loop>:
 20c:	aa 1f       	adc	r26, r26
 20e:	bb 1f       	adc	r27, r27
 210:	a6 17       	cp	r26, r22
 212:	b7 07       	cpc	r27, r23
 214:	10 f0       	brcs	.+4      	; 0x21a <__udivmodhi4_ep>
 216:	a6 1b       	sub	r26, r22
 218:	b7 0b       	sbc	r27, r23

0000021a <__udivmodhi4_ep>:
 21a:	88 1f       	adc	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	5a 95       	dec	r21
 220:	a9 f7       	brne	.-22     	; 0x20c <__udivmodhi4_loop>
 222:	80 95       	com	r24
 224:	90 95       	com	r25
 226:	bc 01       	movw	r22, r24
 228:	cd 01       	movw	r24, r26
 22a:	08 95       	ret

0000022c <do_rand>:
 22c:	8f 92       	push	r8
 22e:	9f 92       	push	r9
 230:	af 92       	push	r10
 232:	bf 92       	push	r11
 234:	cf 92       	push	r12
 236:	df 92       	push	r13
 238:	ef 92       	push	r14
 23a:	ff 92       	push	r15
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	ec 01       	movw	r28, r24
 242:	68 81       	ld	r22, Y
 244:	79 81       	ldd	r23, Y+1	; 0x01
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	9b 81       	ldd	r25, Y+3	; 0x03
 24a:	61 15       	cp	r22, r1
 24c:	71 05       	cpc	r23, r1
 24e:	81 05       	cpc	r24, r1
 250:	91 05       	cpc	r25, r1
 252:	21 f4       	brne	.+8      	; 0x25c <do_rand+0x30>
 254:	64 e2       	ldi	r22, 0x24	; 36
 256:	79 ed       	ldi	r23, 0xD9	; 217
 258:	8b e5       	ldi	r24, 0x5B	; 91
 25a:	97 e0       	ldi	r25, 0x07	; 7
 25c:	2d e1       	ldi	r18, 0x1D	; 29
 25e:	33 ef       	ldi	r19, 0xF3	; 243
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodsi4>
 268:	49 01       	movw	r8, r18
 26a:	5a 01       	movw	r10, r20
 26c:	9b 01       	movw	r18, r22
 26e:	ac 01       	movw	r20, r24
 270:	a7 ea       	ldi	r26, 0xA7	; 167
 272:	b1 e4       	ldi	r27, 0x41	; 65
 274:	0e 94 91 01 	call	0x322	; 0x322 <__muluhisi3>
 278:	6b 01       	movw	r12, r22
 27a:	7c 01       	movw	r14, r24
 27c:	ac ee       	ldi	r26, 0xEC	; 236
 27e:	b4 ef       	ldi	r27, 0xF4	; 244
 280:	a5 01       	movw	r20, r10
 282:	94 01       	movw	r18, r8
 284:	0e 94 9f 01 	call	0x33e	; 0x33e <__mulohisi3>
 288:	dc 01       	movw	r26, r24
 28a:	cb 01       	movw	r24, r22
 28c:	8c 0d       	add	r24, r12
 28e:	9d 1d       	adc	r25, r13
 290:	ae 1d       	adc	r26, r14
 292:	bf 1d       	adc	r27, r15
 294:	b7 ff       	sbrs	r27, 7
 296:	03 c0       	rjmp	.+6      	; 0x29e <do_rand+0x72>
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	a1 09       	sbc	r26, r1
 29c:	b0 48       	sbci	r27, 0x80	; 128
 29e:	88 83       	st	Y, r24
 2a0:	99 83       	std	Y+1, r25	; 0x01
 2a2:	aa 83       	std	Y+2, r26	; 0x02
 2a4:	bb 83       	std	Y+3, r27	; 0x03
 2a6:	9f 77       	andi	r25, 0x7F	; 127
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	df 90       	pop	r13
 2b2:	cf 90       	pop	r12
 2b4:	bf 90       	pop	r11
 2b6:	af 90       	pop	r10
 2b8:	9f 90       	pop	r9
 2ba:	8f 90       	pop	r8
 2bc:	08 95       	ret

000002be <rand_r>:
 2be:	0e 94 16 01 	call	0x22c	; 0x22c <do_rand>
 2c2:	08 95       	ret

000002c4 <rand>:
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	98 e2       	ldi	r25, 0x28	; 40
 2c8:	0e 94 16 01 	call	0x22c	; 0x22c <do_rand>
 2cc:	08 95       	ret

000002ce <srand>:
 2ce:	a0 e0       	ldi	r26, 0x00	; 0
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 2d6:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 2da:	a0 93 02 28 	sts	0x2802, r26	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
 2de:	b0 93 03 28 	sts	0x2803, r27	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
 2e2:	08 95       	ret

000002e4 <__divmodsi4>:
 2e4:	05 2e       	mov	r0, r21
 2e6:	97 fb       	bst	r25, 7
 2e8:	1e f4       	brtc	.+6      	; 0x2f0 <__divmodsi4+0xc>
 2ea:	00 94       	com	r0
 2ec:	0e 94 89 01 	call	0x312	; 0x312 <__negsi2>
 2f0:	57 fd       	sbrc	r21, 7
 2f2:	07 d0       	rcall	.+14     	; 0x302 <__divmodsi4_neg2>
 2f4:	0e 94 a4 01 	call	0x348	; 0x348 <__udivmodsi4>
 2f8:	07 fc       	sbrc	r0, 7
 2fa:	03 d0       	rcall	.+6      	; 0x302 <__divmodsi4_neg2>
 2fc:	4e f4       	brtc	.+18     	; 0x310 <__divmodsi4_exit>
 2fe:	0c 94 89 01 	jmp	0x312	; 0x312 <__negsi2>

00000302 <__divmodsi4_neg2>:
 302:	50 95       	com	r21
 304:	40 95       	com	r20
 306:	30 95       	com	r19
 308:	21 95       	neg	r18
 30a:	3f 4f       	sbci	r19, 0xFF	; 255
 30c:	4f 4f       	sbci	r20, 0xFF	; 255
 30e:	5f 4f       	sbci	r21, 0xFF	; 255

00000310 <__divmodsi4_exit>:
 310:	08 95       	ret

00000312 <__negsi2>:
 312:	90 95       	com	r25
 314:	80 95       	com	r24
 316:	70 95       	com	r23
 318:	61 95       	neg	r22
 31a:	7f 4f       	sbci	r23, 0xFF	; 255
 31c:	8f 4f       	sbci	r24, 0xFF	; 255
 31e:	9f 4f       	sbci	r25, 0xFF	; 255
 320:	08 95       	ret

00000322 <__muluhisi3>:
 322:	0e 94 c6 01 	call	0x38c	; 0x38c <__umulhisi3>
 326:	a5 9f       	mul	r26, r21
 328:	90 0d       	add	r25, r0
 32a:	b4 9f       	mul	r27, r20
 32c:	90 0d       	add	r25, r0
 32e:	a4 9f       	mul	r26, r20
 330:	80 0d       	add	r24, r0
 332:	91 1d       	adc	r25, r1
 334:	11 24       	eor	r1, r1
 336:	08 95       	ret

00000338 <__mulshisi3>:
 338:	b7 ff       	sbrs	r27, 7
 33a:	0c 94 91 01 	jmp	0x322	; 0x322 <__muluhisi3>

0000033e <__mulohisi3>:
 33e:	0e 94 91 01 	call	0x322	; 0x322 <__muluhisi3>
 342:	82 1b       	sub	r24, r18
 344:	93 0b       	sbc	r25, r19
 346:	08 95       	ret

00000348 <__udivmodsi4>:
 348:	a1 e2       	ldi	r26, 0x21	; 33
 34a:	1a 2e       	mov	r1, r26
 34c:	aa 1b       	sub	r26, r26
 34e:	bb 1b       	sub	r27, r27
 350:	fd 01       	movw	r30, r26
 352:	0d c0       	rjmp	.+26     	; 0x36e <__udivmodsi4_ep>

00000354 <__udivmodsi4_loop>:
 354:	aa 1f       	adc	r26, r26
 356:	bb 1f       	adc	r27, r27
 358:	ee 1f       	adc	r30, r30
 35a:	ff 1f       	adc	r31, r31
 35c:	a2 17       	cp	r26, r18
 35e:	b3 07       	cpc	r27, r19
 360:	e4 07       	cpc	r30, r20
 362:	f5 07       	cpc	r31, r21
 364:	20 f0       	brcs	.+8      	; 0x36e <__udivmodsi4_ep>
 366:	a2 1b       	sub	r26, r18
 368:	b3 0b       	sbc	r27, r19
 36a:	e4 0b       	sbc	r30, r20
 36c:	f5 0b       	sbc	r31, r21

0000036e <__udivmodsi4_ep>:
 36e:	66 1f       	adc	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	88 1f       	adc	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	1a 94       	dec	r1
 378:	69 f7       	brne	.-38     	; 0x354 <__udivmodsi4_loop>
 37a:	60 95       	com	r22
 37c:	70 95       	com	r23
 37e:	80 95       	com	r24
 380:	90 95       	com	r25
 382:	9b 01       	movw	r18, r22
 384:	ac 01       	movw	r20, r24
 386:	bd 01       	movw	r22, r26
 388:	cf 01       	movw	r24, r30
 38a:	08 95       	ret

0000038c <__umulhisi3>:
 38c:	a2 9f       	mul	r26, r18
 38e:	b0 01       	movw	r22, r0
 390:	b3 9f       	mul	r27, r19
 392:	c0 01       	movw	r24, r0
 394:	a3 9f       	mul	r26, r19
 396:	70 0d       	add	r23, r0
 398:	81 1d       	adc	r24, r1
 39a:	11 24       	eor	r1, r1
 39c:	91 1d       	adc	r25, r1
 39e:	b2 9f       	mul	r27, r18
 3a0:	70 0d       	add	r23, r0
 3a2:	81 1d       	adc	r24, r1
 3a4:	11 24       	eor	r1, r1
 3a6:	91 1d       	adc	r25, r1
 3a8:	08 95       	ret

000003aa <_exit>:
 3aa:	f8 94       	cli

000003ac <__stop_program>:
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <__stop_program>
