
Excercise 1 - Traffic Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  00000378  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00802804  00802804  00000410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025b6  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000223b  00000000  00000000  00002a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035e  00000000  00000000  00004c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00004ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001174  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010b  00000000  00000000  000061c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000062cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_29>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a4 e0       	ldi	r26, 0x04	; 4
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a6 30       	cpi	r26, 0x06	; 6
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>

000000ac <__do_copy_data>:
  ac:	18 e2       	ldi	r17, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	e8 e7       	ldi	r30, 0x78	; 120
  b4:	f3 e0       	ldi	r31, 0x03	; 3
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>
  c2:	0e 94 88 00 	call	0x110	; 0x110 <main>
  c6:	0c 94 ba 01 	jmp	0x374	; 0x374 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_29>:
#define pin1 2	// Pin 1 = Big Road Pedestrians
#define pin2 4	// Pin 2 = Small Road

int interr = 0;

ISR(PORTF_PORT_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	int intflags = PORTF.INTFLAGS;
  e0:	e0 ea       	ldi	r30, 0xA0	; 160
  e2:	f4 e0       	ldi	r31, 0x04	; 4
  e4:	81 85       	ldd	r24, Z+9	; 0x09
	PORTF.INTFLAGS=intflags;
  e6:	81 87       	std	Z+9, r24	; 0x09
	interr=1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <__data_end>
  f0:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <__data_end+0x1>
	PORTD.OUTSET = pin0;
  f4:	e0 e6       	ldi	r30, 0x60	; 96
  f6:	f4 e0       	ldi	r31, 0x04	; 4
  f8:	85 83       	std	Z+5, r24	; 0x05
	PORTD.OUTCLR = pin1;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	86 83       	std	Z+6, r24	; 0x06
}
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <main>:

int main(void)
{
	PORTD.DIR |=  7;	// Pin 0,1,2 = Output
 110:	e0 e6       	ldi	r30, 0x60	; 96
 112:	f4 e0       	ldi	r31, 0x04	; 4
 114:	80 81       	ld	r24, Z
 116:	87 60       	ori	r24, 0x07	; 7
 118:	80 83       	st	Z, r24
	PORTD.OUT |= 6;		// Initialize traffic lights (Only 0 is on)
 11a:	84 81       	ldd	r24, Z+4	; 0x04
 11c:	86 60       	ori	r24, 0x06	; 6
 11e:	84 83       	std	Z+4, r24	; 0x04
	int tmp = rand()%10;
 120:	0e 94 47 01 	call	0x28e	; 0x28e <rand>
 124:	6a e0       	ldi	r22, 0x0A	; 10
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <__divmodhi4>
 12c:	9c 01       	movw	r18, r24
 12e:	13 c0       	rjmp	.+38     	; 0x156 <main+0x46>
	while (1){
		while ( (tmp == 0) | (tmp == 5) | (tmp == 8) ){
			PORTD.OUTSET = pin0; // Turn off the Big Road's traffic light
 130:	e0 e6       	ldi	r30, 0x60	; 96
 132:	f4 e0       	ldi	r31, 0x04	; 4
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	85 83       	std	Z+5, r24	; 0x05
			PORTD.OUTCLR = pin2; // Turn on the Small Road's traffic light
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	89 ef       	ldi	r24, 0xF9	; 249
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x30>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x36>
 146:	00 00       	nop
			_delay_ms(1);
			tmp = rand()%10;
 148:	0e 94 47 01 	call	0x28e	; 0x28e <rand>
 14c:	6a e0       	ldi	r22, 0x0A	; 10
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <__divmodhi4>
 154:	9c 01       	movw	r18, r24
{
	PORTD.DIR |=  7;	// Pin 0,1,2 = Output
	PORTD.OUT |= 6;		// Initialize traffic lights (Only 0 is on)
	int tmp = rand()%10;
	while (1){
		while ( (tmp == 0) | (tmp == 5) | (tmp == 8) ){
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	21 15       	cp	r18, r1
 15a:	31 05       	cpc	r19, r1
 15c:	09 f0       	breq	.+2      	; 0x160 <main+0x50>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	25 30       	cpi	r18, 0x05	; 5
 164:	31 05       	cpc	r19, r1
 166:	09 f0       	breq	.+2      	; 0x16a <main+0x5a>
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	98 2b       	or	r25, r24
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	28 30       	cpi	r18, 0x08	; 8
 170:	31 05       	cpc	r19, r1
 172:	09 f0       	breq	.+2      	; 0x176 <main+0x66>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	91 11       	cpse	r25, r1
 178:	db cf       	rjmp	.-74     	; 0x130 <main+0x20>
 17a:	81 11       	cpse	r24, r1
 17c:	d9 cf       	rjmp	.-78     	; 0x130 <main+0x20>
			PORTD.OUTSET = pin0; // Turn off the Big Road's traffic light
			PORTD.OUTCLR = pin2; // Turn on the Small Road's traffic light
			_delay_ms(1);
			tmp = rand()%10;
		}
		if (interr == 0){
 17e:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
 182:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <__data_end+0x1>
 186:	89 2b       	or	r24, r25
 188:	31 f7       	brne	.-52     	; 0x156 <main+0x46>
			PORTD.OUTSET = pin2; // Turn off the Small Road's traffic light
 18a:	e0 e6       	ldi	r30, 0x60	; 96
 18c:	f4 e0       	ldi	r31, 0x04	; 4
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	85 83       	std	Z+5, r24	; 0x05
			PORTD.OUTCLR = pin0; // Turn on the Big Road's traffic light
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	86 83       	std	Z+6, r24	; 0x06
			tmp = rand()%10;
 196:	0e 94 47 01 	call	0x28e	; 0x28e <rand>
 19a:	6a e0       	ldi	r22, 0x0A	; 10
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <__divmodhi4>
 1a2:	9c 01       	movw	r18, r24
 1a4:	d8 cf       	rjmp	.-80     	; 0x156 <main+0x46>

000001a6 <__divmodhi4>:
 1a6:	97 fb       	bst	r25, 7
 1a8:	07 2e       	mov	r0, r23
 1aa:	16 f4       	brtc	.+4      	; 0x1b0 <__divmodhi4+0xa>
 1ac:	00 94       	com	r0
 1ae:	07 d0       	rcall	.+14     	; 0x1be <__divmodhi4_neg1>
 1b0:	77 fd       	sbrc	r23, 7
 1b2:	09 d0       	rcall	.+18     	; 0x1c6 <__divmodhi4_neg2>
 1b4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__udivmodhi4>
 1b8:	07 fc       	sbrc	r0, 7
 1ba:	05 d0       	rcall	.+10     	; 0x1c6 <__divmodhi4_neg2>
 1bc:	3e f4       	brtc	.+14     	; 0x1cc <__divmodhi4_exit>

000001be <__divmodhi4_neg1>:
 1be:	90 95       	com	r25
 1c0:	81 95       	neg	r24
 1c2:	9f 4f       	sbci	r25, 0xFF	; 255
 1c4:	08 95       	ret

000001c6 <__divmodhi4_neg2>:
 1c6:	70 95       	com	r23
 1c8:	61 95       	neg	r22
 1ca:	7f 4f       	sbci	r23, 0xFF	; 255

000001cc <__divmodhi4_exit>:
 1cc:	08 95       	ret

000001ce <__udivmodhi4>:
 1ce:	aa 1b       	sub	r26, r26
 1d0:	bb 1b       	sub	r27, r27
 1d2:	51 e1       	ldi	r21, 0x11	; 17
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <__udivmodhi4_ep>

000001d6 <__udivmodhi4_loop>:
 1d6:	aa 1f       	adc	r26, r26
 1d8:	bb 1f       	adc	r27, r27
 1da:	a6 17       	cp	r26, r22
 1dc:	b7 07       	cpc	r27, r23
 1de:	10 f0       	brcs	.+4      	; 0x1e4 <__udivmodhi4_ep>
 1e0:	a6 1b       	sub	r26, r22
 1e2:	b7 0b       	sbc	r27, r23

000001e4 <__udivmodhi4_ep>:
 1e4:	88 1f       	adc	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	5a 95       	dec	r21
 1ea:	a9 f7       	brne	.-22     	; 0x1d6 <__udivmodhi4_loop>
 1ec:	80 95       	com	r24
 1ee:	90 95       	com	r25
 1f0:	bc 01       	movw	r22, r24
 1f2:	cd 01       	movw	r24, r26
 1f4:	08 95       	ret

000001f6 <do_rand>:
 1f6:	8f 92       	push	r8
 1f8:	9f 92       	push	r9
 1fa:	af 92       	push	r10
 1fc:	bf 92       	push	r11
 1fe:	cf 92       	push	r12
 200:	df 92       	push	r13
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	ec 01       	movw	r28, r24
 20c:	68 81       	ld	r22, Y
 20e:	79 81       	ldd	r23, Y+1	; 0x01
 210:	8a 81       	ldd	r24, Y+2	; 0x02
 212:	9b 81       	ldd	r25, Y+3	; 0x03
 214:	61 15       	cp	r22, r1
 216:	71 05       	cpc	r23, r1
 218:	81 05       	cpc	r24, r1
 21a:	91 05       	cpc	r25, r1
 21c:	21 f4       	brne	.+8      	; 0x226 <do_rand+0x30>
 21e:	64 e2       	ldi	r22, 0x24	; 36
 220:	79 ed       	ldi	r23, 0xD9	; 217
 222:	8b e5       	ldi	r24, 0x5B	; 91
 224:	97 e0       	ldi	r25, 0x07	; 7
 226:	2d e1       	ldi	r18, 0x1D	; 29
 228:	33 ef       	ldi	r19, 0xF3	; 243
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	0e 94 57 01 	call	0x2ae	; 0x2ae <__divmodsi4>
 232:	49 01       	movw	r8, r18
 234:	5a 01       	movw	r10, r20
 236:	9b 01       	movw	r18, r22
 238:	ac 01       	movw	r20, r24
 23a:	a7 ea       	ldi	r26, 0xA7	; 167
 23c:	b1 e4       	ldi	r27, 0x41	; 65
 23e:	0e 94 76 01 	call	0x2ec	; 0x2ec <__muluhisi3>
 242:	6b 01       	movw	r12, r22
 244:	7c 01       	movw	r14, r24
 246:	ac ee       	ldi	r26, 0xEC	; 236
 248:	b4 ef       	ldi	r27, 0xF4	; 244
 24a:	a5 01       	movw	r20, r10
 24c:	94 01       	movw	r18, r8
 24e:	0e 94 84 01 	call	0x308	; 0x308 <__mulohisi3>
 252:	dc 01       	movw	r26, r24
 254:	cb 01       	movw	r24, r22
 256:	8c 0d       	add	r24, r12
 258:	9d 1d       	adc	r25, r13
 25a:	ae 1d       	adc	r26, r14
 25c:	bf 1d       	adc	r27, r15
 25e:	b7 ff       	sbrs	r27, 7
 260:	03 c0       	rjmp	.+6      	; 0x268 <do_rand+0x72>
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	a1 09       	sbc	r26, r1
 266:	b0 48       	sbci	r27, 0x80	; 128
 268:	88 83       	st	Y, r24
 26a:	99 83       	std	Y+1, r25	; 0x01
 26c:	aa 83       	std	Y+2, r26	; 0x02
 26e:	bb 83       	std	Y+3, r27	; 0x03
 270:	9f 77       	andi	r25, 0x7F	; 127
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	df 90       	pop	r13
 27c:	cf 90       	pop	r12
 27e:	bf 90       	pop	r11
 280:	af 90       	pop	r10
 282:	9f 90       	pop	r9
 284:	8f 90       	pop	r8
 286:	08 95       	ret

00000288 <rand_r>:
 288:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <do_rand>
 28c:	08 95       	ret

0000028e <rand>:
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	98 e2       	ldi	r25, 0x28	; 40
 292:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <do_rand>
 296:	08 95       	ret

00000298 <srand>:
 298:	a0 e0       	ldi	r26, 0x00	; 0
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 2a0:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 2a4:	a0 93 02 28 	sts	0x2802, r26	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
 2a8:	b0 93 03 28 	sts	0x2803, r27	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
 2ac:	08 95       	ret

000002ae <__divmodsi4>:
 2ae:	05 2e       	mov	r0, r21
 2b0:	97 fb       	bst	r25, 7
 2b2:	1e f4       	brtc	.+6      	; 0x2ba <__divmodsi4+0xc>
 2b4:	00 94       	com	r0
 2b6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__negsi2>
 2ba:	57 fd       	sbrc	r21, 7
 2bc:	07 d0       	rcall	.+14     	; 0x2cc <__divmodsi4_neg2>
 2be:	0e 94 89 01 	call	0x312	; 0x312 <__udivmodsi4>
 2c2:	07 fc       	sbrc	r0, 7
 2c4:	03 d0       	rcall	.+6      	; 0x2cc <__divmodsi4_neg2>
 2c6:	4e f4       	brtc	.+18     	; 0x2da <__divmodsi4_exit>
 2c8:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__negsi2>

000002cc <__divmodsi4_neg2>:
 2cc:	50 95       	com	r21
 2ce:	40 95       	com	r20
 2d0:	30 95       	com	r19
 2d2:	21 95       	neg	r18
 2d4:	3f 4f       	sbci	r19, 0xFF	; 255
 2d6:	4f 4f       	sbci	r20, 0xFF	; 255
 2d8:	5f 4f       	sbci	r21, 0xFF	; 255

000002da <__divmodsi4_exit>:
 2da:	08 95       	ret

000002dc <__negsi2>:
 2dc:	90 95       	com	r25
 2de:	80 95       	com	r24
 2e0:	70 95       	com	r23
 2e2:	61 95       	neg	r22
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	8f 4f       	sbci	r24, 0xFF	; 255
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	08 95       	ret

000002ec <__muluhisi3>:
 2ec:	0e 94 ab 01 	call	0x356	; 0x356 <__umulhisi3>
 2f0:	a5 9f       	mul	r26, r21
 2f2:	90 0d       	add	r25, r0
 2f4:	b4 9f       	mul	r27, r20
 2f6:	90 0d       	add	r25, r0
 2f8:	a4 9f       	mul	r26, r20
 2fa:	80 0d       	add	r24, r0
 2fc:	91 1d       	adc	r25, r1
 2fe:	11 24       	eor	r1, r1
 300:	08 95       	ret

00000302 <__mulshisi3>:
 302:	b7 ff       	sbrs	r27, 7
 304:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__muluhisi3>

00000308 <__mulohisi3>:
 308:	0e 94 76 01 	call	0x2ec	; 0x2ec <__muluhisi3>
 30c:	82 1b       	sub	r24, r18
 30e:	93 0b       	sbc	r25, r19
 310:	08 95       	ret

00000312 <__udivmodsi4>:
 312:	a1 e2       	ldi	r26, 0x21	; 33
 314:	1a 2e       	mov	r1, r26
 316:	aa 1b       	sub	r26, r26
 318:	bb 1b       	sub	r27, r27
 31a:	fd 01       	movw	r30, r26
 31c:	0d c0       	rjmp	.+26     	; 0x338 <__udivmodsi4_ep>

0000031e <__udivmodsi4_loop>:
 31e:	aa 1f       	adc	r26, r26
 320:	bb 1f       	adc	r27, r27
 322:	ee 1f       	adc	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	a2 17       	cp	r26, r18
 328:	b3 07       	cpc	r27, r19
 32a:	e4 07       	cpc	r30, r20
 32c:	f5 07       	cpc	r31, r21
 32e:	20 f0       	brcs	.+8      	; 0x338 <__udivmodsi4_ep>
 330:	a2 1b       	sub	r26, r18
 332:	b3 0b       	sbc	r27, r19
 334:	e4 0b       	sbc	r30, r20
 336:	f5 0b       	sbc	r31, r21

00000338 <__udivmodsi4_ep>:
 338:	66 1f       	adc	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	88 1f       	adc	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	1a 94       	dec	r1
 342:	69 f7       	brne	.-38     	; 0x31e <__udivmodsi4_loop>
 344:	60 95       	com	r22
 346:	70 95       	com	r23
 348:	80 95       	com	r24
 34a:	90 95       	com	r25
 34c:	9b 01       	movw	r18, r22
 34e:	ac 01       	movw	r20, r24
 350:	bd 01       	movw	r22, r26
 352:	cf 01       	movw	r24, r30
 354:	08 95       	ret

00000356 <__umulhisi3>:
 356:	a2 9f       	mul	r26, r18
 358:	b0 01       	movw	r22, r0
 35a:	b3 9f       	mul	r27, r19
 35c:	c0 01       	movw	r24, r0
 35e:	a3 9f       	mul	r26, r19
 360:	70 0d       	add	r23, r0
 362:	81 1d       	adc	r24, r1
 364:	11 24       	eor	r1, r1
 366:	91 1d       	adc	r25, r1
 368:	b2 9f       	mul	r27, r18
 36a:	70 0d       	add	r23, r0
 36c:	81 1d       	adc	r24, r1
 36e:	11 24       	eor	r1, r1
 370:	91 1d       	adc	r25, r1
 372:	08 95       	ret

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
