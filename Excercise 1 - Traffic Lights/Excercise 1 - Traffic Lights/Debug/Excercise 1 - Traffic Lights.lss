
Excercise 1 - Traffic Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00802800  00000424  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000424  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00802806  00802806  000004be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cdd  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022c5  00000000  00000000  0000323d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000432  00000000  00000000  00005502  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00005934  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014d1  00000000  00000000  000059b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014e  00000000  00000000  00006e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00006fd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_29>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e2       	ldi	r17, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	e4 e2       	ldi	r30, 0x24	; 36
  a4:	f4 e0       	ldi	r31, 0x04	; 4
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	28 e2       	ldi	r18, 0x28	; 40
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b8 e2       	ldi	r27, 0x28	; 40
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 10 02 	jmp	0x420	; 0x420 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
				When its value is 0, 5 or 8, it means there's 
				traffic on the small road. */
int counterOn = 1;

int main(void) {
	PORTD.DIR |=  7;	// Pin 0,1,2 = Output
  ce:	e0 e6       	ldi	r30, 0x60	; 96
  d0:	f4 e0       	ldi	r31, 0x04	; 4
  d2:	80 81       	ld	r24, Z
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	80 83       	st	Z, r24
	PORTD.OUT |= 6;		// Initialize traffic lights (Only the Big Road's traffic light is on)
  d8:	84 81       	ldd	r24, Z+4	; 0x04
  da:	86 60       	ori	r24, 0x06	; 6
  dc:	84 83       	std	Z+4, r24	; 0x04
	// Pull-up enable and Interrupt enabled with sense on both edges
	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
  de:	e0 ea       	ldi	r30, 0xA0	; 160
  e0:	f4 e0       	ldi	r31, 0x04	; 4
  e2:	85 89       	ldd	r24, Z+21	; 0x15
  e4:	89 60       	ori	r24, 0x09	; 9
  e6:	85 8b       	std	Z+21, r24	; 0x15
	sei();	// Enable interrupts
  e8:	78 94       	sei
	while (1){
		sensorData = rand()%10;	// Change the sensor's data
  ea:	0e 94 9d 01 	call	0x33a	; 0x33a <rand>
  ee:	6a e0       	ldi	r22, 0x0A	; 10
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	0e 94 29 01 	call	0x252	; 0x252 <__divmodhi4>
  f6:	28 2f       	mov	r18, r24
  f8:	39 2f       	mov	r19, r25
  fa:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <sensorData>
  fe:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <sensorData+0x1>
		// If there's traffic on the small road
		if ( (sensorData == 0) || (sensorData == 5) || (sensorData == 8) ){
 102:	21 15       	cp	r18, r1
 104:	31 05       	cpc	r19, r1
 106:	31 f0       	breq	.+12     	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
 108:	25 30       	cpi	r18, 0x05	; 5
 10a:	31 05       	cpc	r19, r1
 10c:	19 f0       	breq	.+6      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
 10e:	28 30       	cpi	r18, 0x08	; 8
 110:	31 05       	cpc	r19, r1
 112:	59 f7       	brne	.-42     	; 0xea <main+0x1c>
			PORTD.OUTSET = pin0; // Turn off the Big Road's traffic light
 114:	e0 e6       	ldi	r30, 0x60	; 96
 116:	f4 e0       	ldi	r31, 0x04	; 4
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	85 83       	std	Z+5, r24	; 0x05
			PORTD.OUTCLR = pin2; // Turn on the Small Road's traffic light
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <__EEPROM_REGION_LENGTH__+0x24>
 128:	00 c0       	rjmp	.+0      	; 0x12a <__EEPROM_REGION_LENGTH__+0x2a>
 12a:	00 00       	nop
			do {
				_delay_ms(sensTimer);	// Wait before reading the sensor's data
				sensorData = rand()%10;	// Change the sensor's data
 12c:	0e 94 9d 01 	call	0x33a	; 0x33a <rand>
 130:	6a e0       	ldi	r22, 0x0A	; 10
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	0e 94 29 01 	call	0x252	; 0x252 <__divmodhi4>
 138:	28 2f       	mov	r18, r24
 13a:	39 2f       	mov	r19, r25
 13c:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <sensorData>
 140:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <sensorData+0x1>
			} while((sensorData == 0) || (sensorData == 5) || (sensorData == 8));
 144:	21 15       	cp	r18, r1
 146:	31 05       	cpc	r19, r1
 148:	59 f3       	breq	.-42     	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
 14a:	25 30       	cpi	r18, 0x05	; 5
 14c:	31 05       	cpc	r19, r1
 14e:	41 f3       	breq	.-48     	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
 150:	28 30       	cpi	r18, 0x08	; 8
 152:	31 05       	cpc	r19, r1
 154:	29 f3       	breq	.-54     	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
			// ^ While there's traffic on the Small Road ^
			PORTD.OUTSET = pin2;	// Turn off the Small Road's traffic light
 156:	e0 e6       	ldi	r30, 0x60	; 96
 158:	f4 e0       	ldi	r31, 0x04	; 4
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	85 83       	std	Z+5, r24	; 0x05
			PORTD.OUTCLR = pin0;	// Turn on the Big Road's traffic light
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	86 83       	std	Z+6, r24	; 0x06
 162:	89 ef       	ldi	r24, 0xF9	; 249
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <__EEPROM_REGION_LENGTH__+0x66>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <__EEPROM_REGION_LENGTH__+0x6c>
 16c:	00 00       	nop
 16e:	bd cf       	rjmp	.-134    	; 0xea <main+0x1c>

00000170 <__vector_29>:
	}
	cli();	// Disable interrupts (useless because we're using while(1))
}


ISR(PORTF_PORT_vect){
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
	int intflags = PORTF.INTFLAGS;
 184:	e0 ea       	ldi	r30, 0xA0	; 160
 186:	f4 e0       	ldi	r31, 0x04	; 4
 188:	21 85       	ldd	r18, Z+9	; 0x09
	PORTF.INTFLAGS = intflags;
 18a:	21 87       	std	Z+9, r18	; 0x09
	
	btf = PORTD.OUT % 2;	// Save current status of the Big Road's traffic lights
 18c:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
 190:	82 2f       	mov	r24, r18
 192:	81 70       	andi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <__data_end>
 19a:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <__data_end+0x1>

	if (!btf){	// Check if the Big Road's traffic light is on
 19e:	89 2b       	or	r24, r25
 1a0:	31 f4       	brne	.+12     	; 0x1ae <__vector_29+0x3e>
		PORTD.OUT = pin0;		// Turn off the Big Road's traffic light
 1a2:	e0 e6       	ldi	r30, 0x60	; 96
 1a4:	f4 e0       	ldi	r31, 0x04	; 4
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	84 83       	std	Z+4, r24	; 0x04
		PORTD.OUTCLR = pin2;	// Turn on the Small Road's traffic light
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	86 83       	std	Z+6, r24	; 0x06
	}

	counterOn = 1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <counterOn>
 1b6:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <counterOn+0x1>
	TCA0.SINGLE.CNT = 0;	// clear counter
 1ba:	e0 e0       	ldi	r30, 0x00	; 0
 1bc:	fa e0       	ldi	r31, 0x0A	; 10
 1be:	10 a2       	std	Z+32, r1	; 0x20
 1c0:	11 a2       	std	Z+33, r1	; 0x21
	TCA0.SINGLE.CTRLB = 0;	// normal mode (counter)
 1c2:	11 82       	std	Z+1, r1	; 0x01
	TCA0.SINGLE.CMP0 = 10;	// When counter reaches this value -> interrupt clock frequency/1024
 1c4:	8a e0       	ldi	r24, 0x0A	; 10
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	80 a7       	std	Z+40, r24	; 0x28
 1ca:	91 a7       	std	Z+41, r25	; 0x29
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc;	// frequency of counter
 1cc:	8e e0       	ldi	r24, 0x0E	; 14
 1ce:	80 83       	st	Z, r24
	TCA0.SINGLE.CTRLA |= 1;	// Enable
 1d0:	80 81       	ld	r24, Z
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	80 83       	st	Z, r24
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm; // Interrupt Enable for counter
 1d6:	80 e1       	ldi	r24, 0x10	; 16
 1d8:	82 87       	std	Z+10, r24	; 0x0a
	sei();
 1da:	78 94       	sei
	
	PORTD.OUTCLR = pin1;		// Turn on the Pedestrian traffic light
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
	
	while (counterOn){
 1e2:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <counterOn>
 1e6:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <counterOn+0x1>
 1ea:	89 2b       	or	r24, r25
 1ec:	d1 f7       	brne	.-12     	; 0x1e2 <__vector_29+0x72>
	}
	
	PORTD.OUTSET = pin1;		// Turn off the Pedestrian traffic light
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f4465>
	if (!btf){	// If the Big Road's traffic light was on before the interrupt
 1f4:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <__data_end>
 1f8:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <__data_end+0x1>
 1fc:	89 2b       	or	r24, r25
 1fe:	31 f4       	brne	.+12     	; 0x20c <__vector_29+0x9c>
		PORTD.OUTSET = pin2; // Turn off the Small Road's traffic light
 200:	e0 e6       	ldi	r30, 0x60	; 96
 202:	f4 e0       	ldi	r31, 0x04	; 4
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	85 83       	std	Z+5, r24	; 0x05
		PORTD.OUTCLR = pin0; // Turn on the Big Road's traffic light
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	86 83       	std	Z+6, r24	; 0x06
	}
}
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__vector_9>:

ISR(TCA0_CMP0_vect){
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	8f 93       	push	r24
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	TCA0.SINGLE.CTRLA = 0; // Disable counter
 230:	e0 e0       	ldi	r30, 0x00	; 0
 232:	fa e0       	ldi	r31, 0x0A	; 10
 234:	10 82       	st	Z, r1
	int intflags = TCA0.SINGLE.INTFLAGS;
 236:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
 238:	83 87       	std	Z+11, r24	; 0x0b
	counterOn = 0;
 23a:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <counterOn>
 23e:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <counterOn+0x1>
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	8f 91       	pop	r24
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <__divmodhi4>:
 252:	97 fb       	bst	r25, 7
 254:	07 2e       	mov	r0, r23
 256:	16 f4       	brtc	.+4      	; 0x25c <__divmodhi4+0xa>
 258:	00 94       	com	r0
 25a:	07 d0       	rcall	.+14     	; 0x26a <__divmodhi4_neg1>
 25c:	77 fd       	sbrc	r23, 7
 25e:	09 d0       	rcall	.+18     	; 0x272 <__divmodhi4_neg2>
 260:	0e 94 3d 01 	call	0x27a	; 0x27a <__udivmodhi4>
 264:	07 fc       	sbrc	r0, 7
 266:	05 d0       	rcall	.+10     	; 0x272 <__divmodhi4_neg2>
 268:	3e f4       	brtc	.+14     	; 0x278 <__divmodhi4_exit>

0000026a <__divmodhi4_neg1>:
 26a:	90 95       	com	r25
 26c:	81 95       	neg	r24
 26e:	9f 4f       	sbci	r25, 0xFF	; 255
 270:	08 95       	ret

00000272 <__divmodhi4_neg2>:
 272:	70 95       	com	r23
 274:	61 95       	neg	r22
 276:	7f 4f       	sbci	r23, 0xFF	; 255

00000278 <__divmodhi4_exit>:
 278:	08 95       	ret

0000027a <__udivmodhi4>:
 27a:	aa 1b       	sub	r26, r26
 27c:	bb 1b       	sub	r27, r27
 27e:	51 e1       	ldi	r21, 0x11	; 17
 280:	07 c0       	rjmp	.+14     	; 0x290 <__udivmodhi4_ep>

00000282 <__udivmodhi4_loop>:
 282:	aa 1f       	adc	r26, r26
 284:	bb 1f       	adc	r27, r27
 286:	a6 17       	cp	r26, r22
 288:	b7 07       	cpc	r27, r23
 28a:	10 f0       	brcs	.+4      	; 0x290 <__udivmodhi4_ep>
 28c:	a6 1b       	sub	r26, r22
 28e:	b7 0b       	sbc	r27, r23

00000290 <__udivmodhi4_ep>:
 290:	88 1f       	adc	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	5a 95       	dec	r21
 296:	a9 f7       	brne	.-22     	; 0x282 <__udivmodhi4_loop>
 298:	80 95       	com	r24
 29a:	90 95       	com	r25
 29c:	bc 01       	movw	r22, r24
 29e:	cd 01       	movw	r24, r26
 2a0:	08 95       	ret

000002a2 <do_rand>:
 2a2:	8f 92       	push	r8
 2a4:	9f 92       	push	r9
 2a6:	af 92       	push	r10
 2a8:	bf 92       	push	r11
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	ec 01       	movw	r28, r24
 2b8:	68 81       	ld	r22, Y
 2ba:	79 81       	ldd	r23, Y+1	; 0x01
 2bc:	8a 81       	ldd	r24, Y+2	; 0x02
 2be:	9b 81       	ldd	r25, Y+3	; 0x03
 2c0:	61 15       	cp	r22, r1
 2c2:	71 05       	cpc	r23, r1
 2c4:	81 05       	cpc	r24, r1
 2c6:	91 05       	cpc	r25, r1
 2c8:	21 f4       	brne	.+8      	; 0x2d2 <do_rand+0x30>
 2ca:	64 e2       	ldi	r22, 0x24	; 36
 2cc:	79 ed       	ldi	r23, 0xD9	; 217
 2ce:	8b e5       	ldi	r24, 0x5B	; 91
 2d0:	97 e0       	ldi	r25, 0x07	; 7
 2d2:	2d e1       	ldi	r18, 0x1D	; 29
 2d4:	33 ef       	ldi	r19, 0xF3	; 243
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	50 e0       	ldi	r21, 0x00	; 0
 2da:	0e 94 ad 01 	call	0x35a	; 0x35a <__divmodsi4>
 2de:	49 01       	movw	r8, r18
 2e0:	5a 01       	movw	r10, r20
 2e2:	9b 01       	movw	r18, r22
 2e4:	ac 01       	movw	r20, r24
 2e6:	a7 ea       	ldi	r26, 0xA7	; 167
 2e8:	b1 e4       	ldi	r27, 0x41	; 65
 2ea:	0e 94 cc 01 	call	0x398	; 0x398 <__muluhisi3>
 2ee:	6b 01       	movw	r12, r22
 2f0:	7c 01       	movw	r14, r24
 2f2:	ac ee       	ldi	r26, 0xEC	; 236
 2f4:	b4 ef       	ldi	r27, 0xF4	; 244
 2f6:	a5 01       	movw	r20, r10
 2f8:	94 01       	movw	r18, r8
 2fa:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__mulohisi3>
 2fe:	dc 01       	movw	r26, r24
 300:	cb 01       	movw	r24, r22
 302:	8c 0d       	add	r24, r12
 304:	9d 1d       	adc	r25, r13
 306:	ae 1d       	adc	r26, r14
 308:	bf 1d       	adc	r27, r15
 30a:	b7 ff       	sbrs	r27, 7
 30c:	03 c0       	rjmp	.+6      	; 0x314 <do_rand+0x72>
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	a1 09       	sbc	r26, r1
 312:	b0 48       	sbci	r27, 0x80	; 128
 314:	88 83       	st	Y, r24
 316:	99 83       	std	Y+1, r25	; 0x01
 318:	aa 83       	std	Y+2, r26	; 0x02
 31a:	bb 83       	std	Y+3, r27	; 0x03
 31c:	9f 77       	andi	r25, 0x7F	; 127
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	df 90       	pop	r13
 328:	cf 90       	pop	r12
 32a:	bf 90       	pop	r11
 32c:	af 90       	pop	r10
 32e:	9f 90       	pop	r9
 330:	8f 90       	pop	r8
 332:	08 95       	ret

00000334 <rand_r>:
 334:	0e 94 51 01 	call	0x2a2	; 0x2a2 <do_rand>
 338:	08 95       	ret

0000033a <rand>:
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	98 e2       	ldi	r25, 0x28	; 40
 33e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <do_rand>
 342:	08 95       	ret

00000344 <srand>:
 344:	a0 e0       	ldi	r26, 0x00	; 0
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 34c:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 350:	a0 93 02 28 	sts	0x2802, r26	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
 354:	b0 93 03 28 	sts	0x2803, r27	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
 358:	08 95       	ret

0000035a <__divmodsi4>:
 35a:	05 2e       	mov	r0, r21
 35c:	97 fb       	bst	r25, 7
 35e:	1e f4       	brtc	.+6      	; 0x366 <__divmodsi4+0xc>
 360:	00 94       	com	r0
 362:	0e 94 c4 01 	call	0x388	; 0x388 <__negsi2>
 366:	57 fd       	sbrc	r21, 7
 368:	07 d0       	rcall	.+14     	; 0x378 <__divmodsi4_neg2>
 36a:	0e 94 df 01 	call	0x3be	; 0x3be <__udivmodsi4>
 36e:	07 fc       	sbrc	r0, 7
 370:	03 d0       	rcall	.+6      	; 0x378 <__divmodsi4_neg2>
 372:	4e f4       	brtc	.+18     	; 0x386 <__divmodsi4_exit>
 374:	0c 94 c4 01 	jmp	0x388	; 0x388 <__negsi2>

00000378 <__divmodsi4_neg2>:
 378:	50 95       	com	r21
 37a:	40 95       	com	r20
 37c:	30 95       	com	r19
 37e:	21 95       	neg	r18
 380:	3f 4f       	sbci	r19, 0xFF	; 255
 382:	4f 4f       	sbci	r20, 0xFF	; 255
 384:	5f 4f       	sbci	r21, 0xFF	; 255

00000386 <__divmodsi4_exit>:
 386:	08 95       	ret

00000388 <__negsi2>:
 388:	90 95       	com	r25
 38a:	80 95       	com	r24
 38c:	70 95       	com	r23
 38e:	61 95       	neg	r22
 390:	7f 4f       	sbci	r23, 0xFF	; 255
 392:	8f 4f       	sbci	r24, 0xFF	; 255
 394:	9f 4f       	sbci	r25, 0xFF	; 255
 396:	08 95       	ret

00000398 <__muluhisi3>:
 398:	0e 94 01 02 	call	0x402	; 0x402 <__umulhisi3>
 39c:	a5 9f       	mul	r26, r21
 39e:	90 0d       	add	r25, r0
 3a0:	b4 9f       	mul	r27, r20
 3a2:	90 0d       	add	r25, r0
 3a4:	a4 9f       	mul	r26, r20
 3a6:	80 0d       	add	r24, r0
 3a8:	91 1d       	adc	r25, r1
 3aa:	11 24       	eor	r1, r1
 3ac:	08 95       	ret

000003ae <__mulshisi3>:
 3ae:	b7 ff       	sbrs	r27, 7
 3b0:	0c 94 cc 01 	jmp	0x398	; 0x398 <__muluhisi3>

000003b4 <__mulohisi3>:
 3b4:	0e 94 cc 01 	call	0x398	; 0x398 <__muluhisi3>
 3b8:	82 1b       	sub	r24, r18
 3ba:	93 0b       	sbc	r25, r19
 3bc:	08 95       	ret

000003be <__udivmodsi4>:
 3be:	a1 e2       	ldi	r26, 0x21	; 33
 3c0:	1a 2e       	mov	r1, r26
 3c2:	aa 1b       	sub	r26, r26
 3c4:	bb 1b       	sub	r27, r27
 3c6:	fd 01       	movw	r30, r26
 3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <__udivmodsi4_ep>

000003ca <__udivmodsi4_loop>:
 3ca:	aa 1f       	adc	r26, r26
 3cc:	bb 1f       	adc	r27, r27
 3ce:	ee 1f       	adc	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	a2 17       	cp	r26, r18
 3d4:	b3 07       	cpc	r27, r19
 3d6:	e4 07       	cpc	r30, r20
 3d8:	f5 07       	cpc	r31, r21
 3da:	20 f0       	brcs	.+8      	; 0x3e4 <__udivmodsi4_ep>
 3dc:	a2 1b       	sub	r26, r18
 3de:	b3 0b       	sbc	r27, r19
 3e0:	e4 0b       	sbc	r30, r20
 3e2:	f5 0b       	sbc	r31, r21

000003e4 <__udivmodsi4_ep>:
 3e4:	66 1f       	adc	r22, r22
 3e6:	77 1f       	adc	r23, r23
 3e8:	88 1f       	adc	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	1a 94       	dec	r1
 3ee:	69 f7       	brne	.-38     	; 0x3ca <__udivmodsi4_loop>
 3f0:	60 95       	com	r22
 3f2:	70 95       	com	r23
 3f4:	80 95       	com	r24
 3f6:	90 95       	com	r25
 3f8:	9b 01       	movw	r18, r22
 3fa:	ac 01       	movw	r20, r24
 3fc:	bd 01       	movw	r22, r26
 3fe:	cf 01       	movw	r24, r30
 400:	08 95       	ret

00000402 <__umulhisi3>:
 402:	a2 9f       	mul	r26, r18
 404:	b0 01       	movw	r22, r0
 406:	b3 9f       	mul	r27, r19
 408:	c0 01       	movw	r24, r0
 40a:	a3 9f       	mul	r26, r19
 40c:	70 0d       	add	r23, r0
 40e:	81 1d       	adc	r24, r1
 410:	11 24       	eor	r1, r1
 412:	91 1d       	adc	r25, r1
 414:	b2 9f       	mul	r27, r18
 416:	70 0d       	add	r23, r0
 418:	81 1d       	adc	r24, r1
 41a:	11 24       	eor	r1, r1
 41c:	91 1d       	adc	r25, r1
 41e:	08 95       	ret

00000420 <_exit>:
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
