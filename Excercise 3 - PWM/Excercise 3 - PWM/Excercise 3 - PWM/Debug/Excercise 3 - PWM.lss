
Excercise 3 - PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00802800  00802800  0000039e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033c2  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022fb  00000000  00000000  0000383a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b8  00000000  00000000  00005b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00005ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a5d  00000000  00000000  00006134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028f  00000000  00000000  00007b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00007e20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_7>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_23>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_29>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a4 30       	cpi	r26, 0x04	; 4
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 80 01 	call	0x300	; 0x300 <main>
  b0:	0c 94 93 01 	jmp	0x326	; 0x326 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <initialize_TCA>:
void stop_moving(){
	TCA0.SINGLE.CNT = 0;		// Clear counter
	PORTD.OUT |= 8;				// Turn on standby LED
	TCA0.SINGLE.CTRLA = 0;				// Disable TCA
	TCB0.CTRLA = 0;				// Disable TCB
	ADC0.CTRLA = 0;				// Disable ADC
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	fa e0       	ldi	r31, 0x0A	; 10
  bc:	2a e0       	ldi	r18, 0x0A	; 10
  be:	20 83       	st	Z, r18
  c0:	86 a3       	std	Z+38, r24	; 0x26
  c2:	97 a3       	std	Z+39, r25	; 0x27
  c4:	9c 01       	movw	r18, r24
  c6:	99 23       	and	r25, r25
  c8:	14 f4       	brge	.+4      	; 0xce <initialize_TCA+0x16>
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	35 95       	asr	r19
  d0:	27 95       	ror	r18
  d2:	e0 e0       	ldi	r30, 0x00	; 0
  d4:	fa e0       	ldi	r31, 0x0A	; 10
  d6:	20 a7       	std	Z+40, r18	; 0x28
  d8:	31 a7       	std	Z+41, r19	; 0x29
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	83 60       	ori	r24, 0x03	; 3
  de:	81 83       	std	Z+1, r24	; 0x01
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	82 87       	std	Z+10, r24	; 0x0a
  e4:	82 85       	ldd	r24, Z+10	; 0x0a
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	82 87       	std	Z+10, r24	; 0x0a
  ea:	80 81       	ld	r24, Z
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <initialize_TCB>:
  f2:	98 ed       	ldi	r25, 0xD8	; 216
  f4:	94 bf       	out	0x34, r25	; 52
  f6:	e0 e6       	ldi	r30, 0x60	; 96
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	2b e0       	ldi	r18, 0x0B	; 11
  fc:	21 83       	std	Z+1, r18	; 0x01
  fe:	94 bf       	out	0x34, r25	; 52
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	90 83       	st	Z, r25
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	38 2f       	mov	r19, r24
 10a:	33 0f       	add	r19, r19
 10c:	33 0f       	add	r19, r19
 10e:	2f 6f       	ori	r18, 0xFF	; 255
 110:	e0 e8       	ldi	r30, 0x80	; 128
 112:	fa e0       	ldi	r31, 0x0A	; 10
 114:	24 87       	std	Z+12, r18	; 0x0c
 116:	35 87       	std	Z+13, r19	; 0x0d
 118:	80 81       	ld	r24, Z
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24
 11e:	80 81       	ld	r24, Z
 120:	82 60       	ori	r24, 0x02	; 2
 122:	80 83       	st	Z, r24
 124:	81 81       	ldd	r24, Z+1	; 0x01
 126:	80 61       	ori	r24, 0x10	; 16
 128:	81 83       	std	Z+1, r24	; 0x01
 12a:	81 81       	ldd	r24, Z+1	; 0x01
 12c:	87 60       	ori	r24, 0x07	; 7
 12e:	81 83       	std	Z+1, r24	; 0x01
 130:	08 95       	ret

00000132 <initialize_ADC>:
 132:	e0 e0       	ldi	r30, 0x00	; 0
 134:	f6 e0       	ldi	r31, 0x06	; 6
 136:	80 81       	ld	r24, Z
 138:	80 83       	st	Z, r24
 13a:	80 81       	ld	r24, Z
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	80 83       	st	Z, r24
 140:	80 81       	ld	r24, Z
 142:	81 60       	ori	r24, 0x01	; 1
 144:	80 83       	st	Z, r24
 146:	86 81       	ldd	r24, Z+6	; 0x06
 148:	87 60       	ori	r24, 0x07	; 7
 14a:	86 83       	std	Z+6, r24	; 0x06
 14c:	84 85       	ldd	r24, Z+12	; 0x0c
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	84 87       	std	Z+12, r24	; 0x0c
 152:	82 89       	ldd	r24, Z+18	; 0x12
 154:	93 89       	ldd	r25, Z+19	; 0x13
 156:	88 61       	ori	r24, 0x18	; 24
 158:	82 8b       	std	Z+18, r24	; 0x12
 15a:	93 8b       	std	Z+19, r25	; 0x13
 15c:	82 85       	ldd	r24, Z+10	; 0x0a
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	82 87       	std	Z+10, r24	; 0x0a
 162:	84 81       	ldd	r24, Z+4	; 0x04
 164:	81 60       	ori	r24, 0x01	; 1
 166:	84 83       	std	Z+4, r24	; 0x04
 168:	08 95       	ret

0000016a <move_forward>:
 16a:	0e 94 99 00 	call	0x132	; 0x132 <initialize_ADC>
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 5c 00 	call	0xb8	; 0xb8 <initialize_TCA>
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 79 00 	call	0xf2	; 0xf2 <initialize_TCB>
 17e:	08 95       	ret

00000180 <turn>:
}

void turn(int direction){	
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ec 01       	movw	r28, r24
	// If the standby led (LED 2 or 3rd bit of PORTD.OUT)
	// is not on, don't do anything
	if(!(PORTD.OUT / 7 % 2))
 186:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
 18a:	25 e2       	ldi	r18, 0x25	; 37
 18c:	92 9f       	mul	r25, r18
 18e:	21 2d       	mov	r18, r1
 190:	11 24       	eor	r1, r1
 192:	92 1b       	sub	r25, r18
 194:	96 95       	lsr	r25
 196:	92 0f       	add	r25, r18
 198:	92 ff       	sbrs	r25, 2
 19a:	38 c0       	rjmp	.+112    	; 0x20c <turn+0x8c>
		return;
		
	// Stop turning and start moving forward again
	if(turning==1){
 19c:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <turning>
 1a0:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <turning+0x1>
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	61 f4       	brne	.+24     	; 0x1c0 <turn+0x40>
		turning = 0;
 1a8:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <turning>
 1ac:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <turning+0x1>
		PORTD.OUT |= 8; // Turn LED 2 (STANDBY LED) off
 1b0:	e0 e6       	ldi	r30, 0x60	; 96
 1b2:	f4 e0       	ldi	r31, 0x04	; 4
 1b4:	84 81       	ldd	r24, Z+4	; 0x04
 1b6:	88 60       	ori	r24, 0x08	; 8
 1b8:	84 83       	std	Z+4, r24	; 0x04
		move_forward();	// Start moving forward
 1ba:	0e 94 b5 00 	call	0x16a	; 0x16a <move_forward>
		return;			// Exit function
 1be:	26 c0       	rjmp	.+76     	; 0x20c <turn+0x8c>
	}
	ADC0.CTRLA = 0;				// Disable ADC
 1c0:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
	
	// If the device was turning right, 
	// then the left_wheel speed is 2 x STD_PER.
	if(direction){
 1c4:	20 97       	sbiw	r28, 0x00	; 0
 1c6:	29 f0       	breq	.+10     	; 0x1d2 <turn+0x52>
		// In order to start going straight again,
		// set left_wheel speed to STD_PER.
		initialize_TCB(STD_PER);
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 79 00 	call	0xf2	; 0xf2 <initialize_TCB>
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <turn+0x5a>
	}
	else {
		// Similarly, if it was turning left,
		// set the right_wheel speed to STD_PER.
		initialize_TCA(STD_PER);
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <initialize_TCA>
	}
	turning = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <turning>
 1e2:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <turning+0x1>
	// Start turning right
	if(direction==1){
 1e6:	21 97       	sbiw	r28, 0x01	; 1
 1e8:	49 f4       	brne	.+18     	; 0x1fc <turn+0x7c>
		initialize_TCA(STD_PER*2);	// Right wheel's period doubles => moves slower
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 5c 00 	call	0xb8	; 0xb8 <initialize_TCA>
		initialize_TCB(STD_PER);	// Left wheel's period is set to default speed
 1f2:	84 e0       	ldi	r24, 0x04	; 4
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 79 00 	call	0xf2	; 0xf2 <initialize_TCB>
 1fa:	08 c0       	rjmp	.+16     	; 0x20c <turn+0x8c>
	}
	// Start turning left
	else{
		initialize_TCA(STD_PER);	// Left wheel's period doubles => moves slower
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 5c 00 	call	0xb8	; 0xb8 <initialize_TCA>
		initialize_TCB(STD_PER*2);	// Right wheel's period is set to default speed
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 79 00 	call	0xf2	; 0xf2 <initialize_TCB>
	}
}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <__vector_7>:

// TCA0 Overflow ISR
ISR(TCA0_OVF_vect){
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
	tca0_int_cnt ++ ;
 224:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 228:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 232:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
	// Clear the interrupt flag
	int intflags = TCA0.SINGLE.INTFLAGS;
 236:	e0 e0       	ldi	r30, 0x00	; 0
 238:	fa e0       	ldi	r31, 0x0A	; 10
 23a:	93 85       	ldd	r25, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
 23c:	93 87       	std	Z+11, r25	; 0x0b
	
	// Every 2 PULSES, move the right wheel.
	if(tca0_int_cnt % 2 == 0)
 23e:	80 fd       	sbrc	r24, 0
 240:	04 c0       	rjmp	.+8      	; 0x24a <__vector_7+0x38>
		PORTD.OUTCLR = 1;	// Turn LED 0 on
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
 248:	03 c0       	rjmp	.+6      	; 0x250 <__vector_7+0x3e>
	else
		PORTD.OUTSET = 1;	// Turn LED 0 off 
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f4465>
	TCA0.SINGLE.CNT = 0;	// Clear counter
 250:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
 254:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <__vector_23>:

// ADC ISR
ISR(ADC0_WCOMP_vect){
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	8f 93       	push	r24
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
	int intflags = ADC0.INTFLAGS;
 27a:	e0 e0       	ldi	r30, 0x00	; 0
 27c:	f6 e0       	ldi	r31, 0x06	; 6
 27e:	83 85       	ldd	r24, Z+11	; 0x0b
	ADC0.INTFLAGS = intflags;
 280:	83 87       	std	Z+11, r24	; 0x0b
	// Stop moving
	TCA0.SINGLE.CNT = 0;		// Clear counter
 282:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
 286:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
	PORTD.OUT |= 8;				// Turn on standby LED
 28a:	e0 e6       	ldi	r30, 0x60	; 96
 28c:	f4 e0       	ldi	r31, 0x04	; 4
 28e:	84 81       	ldd	r24, Z+4	; 0x04
 290:	88 60       	ori	r24, 0x08	; 8
 292:	84 83       	std	Z+4, r24	; 0x04
}
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_29>:

// Switch ISR
ISR (PORTF_PORT_vect){
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
	int intflags = PORTF.INTFLAGS;
 2c6:	e0 ea       	ldi	r30, 0xA0	; 160
 2c8:	f4 e0       	ldi	r31, 0x04	; 4
 2ca:	81 85       	ldd	r24, Z+9	; 0x09
	PORTF.INTFLAGS = intflags;	
 2cc:	81 87       	std	Z+9, r24	; 0x09
	turn(PORTF.INTFLAGS / 16 % 2);
 2ce:	81 85       	ldd	r24, Z+9	; 0x09
 2d0:	82 95       	swap	r24
 2d2:	81 70       	andi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 c0 00 	call	0x180	; 0x180 <turn>
	initialize_ADC();
 2da:	0e 94 99 00 	call	0x132	; 0x132 <initialize_ADC>
}
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <main>:

int main(){
	PORTD.DIR |= 5;				// PORTD: PIN 0 and 2 is output
 300:	a0 e6       	ldi	r26, 0x60	; 96
 302:	b4 e0       	ldi	r27, 0x04	; 4
 304:	8c 91       	ld	r24, X
 306:	85 60       	ori	r24, 0x05	; 5
 308:	8c 93       	st	X, r24
	PORTB.DIR |= 1;				// PORTB: PIN 0 is output
 30a:	e0 e2       	ldi	r30, 0x20	; 32
 30c:	f4 e0       	ldi	r31, 0x04	; 4
 30e:	80 81       	ld	r24, Z
 310:	81 60       	ori	r24, 0x01	; 1
 312:	80 83       	st	Z, r24
	PORTD.OUT = 5;				// Turn off PORTD LEDs (PIN 0 and 2) -> Right Wheel + Standby LED
 314:	85 e0       	ldi	r24, 0x05	; 5
 316:	14 96       	adiw	r26, 0x04	; 4
 318:	8c 93       	st	X, r24
	PORTB.OUT = 1;				// Turn off PORTB LED (PIN 0) -> Left Wheel
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	84 83       	std	Z+4, r24	; 0x04
	move_forward();
 31e:	0e 94 b5 00 	call	0x16a	; 0x16a <move_forward>
	sei();						// Enable interrupts
 322:	78 94       	sei
 324:	ff cf       	rjmp	.-2      	; 0x324 <main+0x24>

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
