
Excercise 3 - PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002bea  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002217  00000000  00000000  00002e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000316  00000000  00000000  00005075  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  0000538c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000014a7  00000000  00000000  00005434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000195  00000000  00000000  000068db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00006a70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_7>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_9>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_29>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  a0:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <main>:
#define left_wheel = PORTD.PIN1_bm
#define standby_led = PORTD.PIN2_bm
#define standard_freq = 1

int main(){
	PORTD.DIR |= PIN1_bm; // PIN is output
  a8:	e0 e6       	ldi	r30, 0x60	; 96
  aa:	f4 e0       	ldi	r31, 0x04	; 4
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
	// Prescaler = 1024
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc;
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	fa e0       	ldi	r31, 0x0A	; 10
  b6:	8e e0       	ldi	r24, 0x0E	; 14
  b8:	80 83       	st	Z, r24
	TCA0.SINGLE.PER = 254; // Select the resolution
  ba:	8e ef       	ldi	r24, 0xFE	; 254
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	86 a3       	std	Z+38, r24	; 0x26
  c0:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CMP0 = 127; // Select the duty cycle
  c2:	8f e7       	ldi	r24, 0x7F	; 127
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	80 a7       	std	Z+40, r24	; 0x28
  c8:	91 a7       	std	Z+41, r25	; 0x29
	// Select Single_Slope_PWM
	TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
  ca:	81 81       	ldd	r24, Z+1	; 0x01
  cc:	83 60       	ori	r24, 0x03	; 3
  ce:	81 83       	std	Z+1, r24	; 0x01
	// Enable interrupt overflow
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	82 87       	std	Z+10, r24	; 0x0a
	// Enable interrupt COMP0
	TCA0.SINGLE.INTCTRL |= TCA_SINGLE_CMP0_bm;
  d4:	82 85       	ldd	r24, Z+10	; 0x0a
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	82 87       	std	Z+10, r24	; 0x0a
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm; // Enable
  da:	80 81       	ld	r24, Z
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	80 83       	st	Z, r24
	sei();
  e0:	78 94       	sei
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x3a>

000000e4 <__vector_7>:
	while(1){
		
	}
}

ISR(TCA0_OVF_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	// Clear the interrupt flag
	int intflags = TCA0.SINGLE.INTFLAGS;
  f4:	e0 e0       	ldi	r30, 0x00	; 0
  f6:	fa e0       	ldi	r31, 0x0A	; 10
  f8:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
  fa:	83 87       	std	Z+11, r24	; 0x0b
	PORTD.OUT |= PIN1_bm; // PIN is on
  fc:	e0 e6       	ldi	r30, 0x60	; 96
  fe:	f4 e0       	ldi	r31, 0x04	; 4
 100:	84 81       	ldd	r24, Z+4	; 0x04
 102:	82 60       	ori	r24, 0x02	; 2
 104:	84 83       	std	Z+4, r24	; 0x04
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_9>:

ISR(TCA0_CMP0_vect){
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	// Clear the interrupt flag
	int intflags = TCA0.SINGLE.INTFLAGS;
 126:	e0 e0       	ldi	r30, 0x00	; 0
 128:	fa e0       	ldi	r31, 0x0A	; 10
 12a:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
 12c:	83 87       	std	Z+11, r24	; 0x0b
	PORTD.OUTCLR |= PIN1_bm; // PIN is off
 12e:	e0 e6       	ldi	r30, 0x60	; 96
 130:	f4 e0       	ldi	r31, 0x04	; 4
 132:	86 81       	ldd	r24, Z+6	; 0x06
 134:	82 60       	ori	r24, 0x02	; 2
 136:	86 83       	std	Z+6, r24	; 0x06
}
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_29>:

// Switch ISR
ISR (PORTF_PORT_vect){
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	int intflags = PORTF.INTFLAGS;
 158:	e0 ea       	ldi	r30, 0xA0	; 160
 15a:	f4 e0       	ldi	r31, 0x04	; 4
 15c:	81 85       	ldd	r24, Z+9	; 0x09
	PORTF.INTFLAGS = intflags;
 15e:	81 87       	std	Z+9, r24	; 0x09
	
	
	
	// Check which switch was pressed
	if(PORTF.INTFLAGS % 1000 / 6 == 1){
 160:	81 85       	ldd	r24, Z+9	; 0x09
		// 
	}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	8f 91       	pop	r24
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
