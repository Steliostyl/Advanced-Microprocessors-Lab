
Excercise 3 - PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00802800  00802800  00000330  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003032  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000230f  00000000  00000000  00003432  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000435  00000000  00000000  00005741  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00005b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000172f  00000000  00000000  00005ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026e  00000000  00000000  000073cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000763d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_7>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_23>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_29>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a4 30       	cpi	r26, 0x04	; 4
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
  b0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <__vector_7>:
		initialize_TCB(STD_PER*2);
	}
}

// Counter Overflow ISR
ISR(TCA0_OVF_vect){
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	tca0_int_cnt ++ ;
  ca:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
  ce:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
  d8:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
	// Clear the interrupt flag
	int intflags = TCA0.SINGLE.INTFLAGS;
  dc:	e0 e0       	ldi	r30, 0x00	; 0
  de:	fa e0       	ldi	r31, 0x0A	; 10
  e0:	93 85       	ldd	r25, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
  e2:	93 87       	std	Z+11, r25	; 0x0b
	if(tca0_int_cnt % 2 == 0)
  e4:	80 fd       	sbrc	r24, 0
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <__vector_7+0x38>
		PORTD.OUTCLR = 1;	// Turn LED 0 on
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <__vector_7+0x3e>
	else
		PORTD.OUTSET = 1;	// Turn LED 0 off 
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f4465>
	TCA0.SINGLE.CNT = 0;	// Clear counter
  f6:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
  fa:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
}
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <__vector_23>:

// ADC ISR
ISR(ADC0_WCOMP_vect){
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	int intflags = ADC0.INTFLAGS;
 120:	e0 e0       	ldi	r30, 0x00	; 0
 122:	f6 e0       	ldi	r31, 0x06	; 6
 124:	83 85       	ldd	r24, Z+11	; 0x0b
	ADC0.INTFLAGS = intflags;
 126:	83 87       	std	Z+11, r24	; 0x0b
	// Stop moving
	TCA0.SINGLE.CNT = 0;		// Clear counter
 128:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
 12c:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
	PORTD.OUT |= 8;				// Turn on standby LED
 130:	e0 e6       	ldi	r30, 0x60	; 96
 132:	f4 e0       	ldi	r31, 0x04	; 4
 134:	84 81       	ldd	r24, Z+4	; 0x04
 136:	88 60       	ori	r24, 0x08	; 8
 138:	84 83       	std	Z+4, r24	; 0x04
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <initialize_TCA>:
	turn(PORTF.INTFLAGS / 16 % 2);
}


void initialize_TCA(int period){
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc;	// Prescaler = 1024
 14a:	e0 e0       	ldi	r30, 0x00	; 0
 14c:	fa e0       	ldi	r31, 0x0A	; 10
 14e:	2e e0       	ldi	r18, 0x0E	; 14
 150:	20 83       	st	Z, r18
	TCA0.SINGLE.PER = period;		// Select the resolution
 152:	86 a3       	std	Z+38, r24	; 0x26
 154:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CMP0 = period/2;	// Select the duty cycle	
 156:	9c 01       	movw	r18, r24
 158:	99 23       	and	r25, r25
 15a:	14 f4       	brge	.+4      	; 0x160 <initialize_TCA+0x16>
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	35 95       	asr	r19
 162:	27 95       	ror	r18
 164:	e0 e0       	ldi	r30, 0x00	; 0
 166:	fa e0       	ldi	r31, 0x0A	; 10
 168:	20 a7       	std	Z+40, r18	; 0x28
 16a:	31 a7       	std	Z+41, r19	; 0x29
	TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_SINGLESLOPE_gc;	// Select Single_Slope_PWM
 16c:	81 81       	ldd	r24, Z+1	; 0x01
 16e:	83 60       	ori	r24, 0x03	; 3
 170:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;	// Enable interrupt overflow
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	82 87       	std	Z+10, r24	; 0x0a
	TCA0.SINGLE.INTCTRL |= TCA_SINGLE_CMP0_bm;	// Enable interrupt COMP0
 176:	82 85       	ldd	r24, Z+10	; 0x0a
 178:	80 61       	ori	r24, 0x10	; 16
 17a:	82 87       	std	Z+10, r24	; 0x0a
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;	// Enable
 17c:	80 81       	ld	r24, Z
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <initialize_TCB>:
}

void initialize_TCB(int period){
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc;	// Prescaler = 1024
 184:	e0 e0       	ldi	r30, 0x00	; 0
 186:	fa e0       	ldi	r31, 0x0A	; 10
 188:	2e e0       	ldi	r18, 0x0E	; 14
 18a:	20 83       	st	Z, r18
	TCA0.SINGLE.PER = period;		// Select the resolution
 18c:	86 a3       	std	Z+38, r24	; 0x26
 18e:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CMP0 = period/2;	// Select the duty cycle
 190:	9c 01       	movw	r18, r24
 192:	99 23       	and	r25, r25
 194:	14 f4       	brge	.+4      	; 0x19a <initialize_TCB+0x16>
 196:	2f 5f       	subi	r18, 0xFF	; 255
 198:	3f 4f       	sbci	r19, 0xFF	; 255
 19a:	35 95       	asr	r19
 19c:	27 95       	ror	r18
 19e:	e0 e0       	ldi	r30, 0x00	; 0
 1a0:	fa e0       	ldi	r31, 0x0A	; 10
 1a2:	20 a7       	std	Z+40, r18	; 0x28
 1a4:	31 a7       	std	Z+41, r19	; 0x29
	TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_SINGLESLOPE_gc;	// Select Single_Slope_PWM
 1a6:	81 81       	ldd	r24, Z+1	; 0x01
 1a8:	83 60       	ori	r24, 0x03	; 3
 1aa:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;	// Enable interrupt overflow
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	82 87       	std	Z+10, r24	; 0x0a
	TCA0.SINGLE.INTCTRL |= TCA_SINGLE_CMP0_bm;	// Enable interrupt COMP0
 1b0:	82 85       	ldd	r24, Z+10	; 0x0a
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	82 87       	std	Z+10, r24	; 0x0a
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;	// Enable
 1b6:	80 81       	ld	r24, Z
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <turn>:
	TCA0.SINGLE.CNT = 0;		// Clear counter
	PORTD.OUT |= 8;				// Turn on standby LED
}

void turn(int direction){
	if(turning==1){
 1be:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <turning>
 1c2:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <turning+0x1>
 1c6:	21 30       	cpi	r18, 0x01	; 1
 1c8:	31 05       	cpc	r19, r1
 1ca:	29 f4       	brne	.+10     	; 0x1d6 <turn+0x18>
		// Stop turning
		turning = 0;
 1cc:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <turning>
 1d0:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <turning+0x1>
		return;
 1d4:	08 95       	ret
	}
	turning = 1;
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	20 93 02 28 	sts	0x2802, r18	; 0x802802 <turning>
 1de:	30 93 03 28 	sts	0x2803, r19	; 0x802803 <turning+0x1>
	// Start turning right
	if(direction==1){
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	49 f4       	brne	.+18     	; 0x1f8 <turn+0x3a>
		initialize_TCA(STD_PER*2);
 1e6:	8e ef       	ldi	r24, 0xFE	; 254
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 a5 00 	call	0x14a	; 0x14a <initialize_TCA>
		initialize_TCB(STD_PER);
 1ee:	8f e7       	ldi	r24, 0x7F	; 127
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 c2 00 	call	0x184	; 0x184 <initialize_TCB>
 1f6:	08 95       	ret
	}
	// Start turning left
	else{
		initialize_TCA(STD_PER);
 1f8:	8f e7       	ldi	r24, 0x7F	; 127
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 a5 00 	call	0x14a	; 0x14a <initialize_TCA>
		initialize_TCB(STD_PER*2);
 200:	8e ef       	ldi	r24, 0xFE	; 254
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 c2 00 	call	0x184	; 0x184 <initialize_TCB>
 208:	08 95       	ret

0000020a <__vector_29>:
	TCA0.SINGLE.CNT = 0;		// Clear counter
	PORTD.OUT |= 8;				// Turn on standby LED
}

// Switch ISR
ISR (PORTF_PORT_vect){
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	6f 93       	push	r22
 21e:	7f 93       	push	r23
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	af 93       	push	r26
 226:	bf 93       	push	r27
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	int intflags = PORTF.INTFLAGS;
 22c:	e0 ea       	ldi	r30, 0xA0	; 160
 22e:	f4 e0       	ldi	r31, 0x04	; 4
 230:	81 85       	ldd	r24, Z+9	; 0x09
	PORTF.INTFLAGS = intflags;
 232:	81 87       	std	Z+9, r24	; 0x09
	
	turn(PORTF.INTFLAGS / 16 % 2);
 234:	81 85       	ldd	r24, Z+9	; 0x09
 236:	82 95       	swap	r24
 238:	81 70       	andi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 df 00 	call	0x1be	; 0x1be <turn>
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <initialize_ADC>:
}


// Initialize the ADC for Free-Running mode
void initialize_ADC(){
	ADC0.CTRLA |= ADC_RESSEL_10BIT_gc;	// 10-bit resolution
 262:	e0 e0       	ldi	r30, 0x00	; 0
 264:	f6 e0       	ldi	r31, 0x06	; 6
 266:	80 81       	ld	r24, Z
 268:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_FREERUN_bm;		// Free-Running mode enabled
 26a:	80 81       	ld	r24, Z
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_ENABLE_bm;		// Enable ADC
 270:	80 81       	ld	r24, Z
 272:	81 60       	ori	r24, 0x01	; 1
 274:	80 83       	st	Z, r24
	ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc;	// The bit
 276:	86 81       	ldd	r24, Z+6	; 0x06
 278:	87 60       	ori	r24, 0x07	; 7
 27a:	86 83       	std	Z+6, r24	; 0x06
	ADC0.DBGCTRL |= ADC_DBGRUN_bm;		// Enable Debug Mode
 27c:	84 85       	ldd	r24, Z+12	; 0x0c
 27e:	81 60       	ori	r24, 0x01	; 1
 280:	84 87       	std	Z+12, r24	; 0x0c
	// Window Comparator Mode
	ADC0.WINLT |= 24; // Set threshold
 282:	82 89       	ldd	r24, Z+18	; 0x12
 284:	93 89       	ldd	r25, Z+19	; 0x13
 286:	88 61       	ori	r24, 0x18	; 24
 288:	82 8b       	std	Z+18, r24	; 0x12
 28a:	93 8b       	std	Z+19, r25	; 0x13
	ADC0.INTCTRL |= ADC_WCMP_bm; // Enable Interrupts for WCM
 28c:	82 85       	ldd	r24, Z+10	; 0x0a
 28e:	82 60       	ori	r24, 0x02	; 2
 290:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.CTRLE |= ADC_WINCM0_bm; // Interrupt when Result < WINLT
 292:	84 81       	ldd	r24, Z+4	; 0x04
 294:	81 60       	ori	r24, 0x01	; 1
 296:	84 83       	std	Z+4, r24	; 0x04
 298:	08 95       	ret

0000029a <main>:




int main(){
	PORTD.DIR |= PIN1_bm;	// PIN is output
 29a:	c0 e6       	ldi	r28, 0x60	; 96
 29c:	d4 e0       	ldi	r29, 0x04	; 4
 29e:	88 81       	ld	r24, Y
 2a0:	82 60       	ori	r24, 0x02	; 2
 2a2:	88 83       	st	Y, r24
	initialize_TCA(STD_PER);		// Initialize TCA0 for PWM mode
 2a4:	8f e7       	ldi	r24, 0x7F	; 127
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 a5 00 	call	0x14a	; 0x14a <initialize_TCA>
	initialize_ADC();		// Initialize ADC for Free Running Mode
 2ac:	0e 94 31 01 	call	0x262	; 0x262 <initialize_ADC>
	sei();
 2b0:	78 94       	sei
	PORTD.OUT = 7;
 2b2:	87 e0       	ldi	r24, 0x07	; 7
 2b4:	8c 83       	std	Y+4, r24	; 0x04
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <main+0x1c>

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
