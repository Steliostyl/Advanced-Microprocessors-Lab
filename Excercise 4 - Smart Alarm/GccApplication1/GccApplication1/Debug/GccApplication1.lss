
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  00000967  00000a1b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000952  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000015  00004952  00000952  00000a06  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000000a  00802804  00802804  00000a1f  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00000a1f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002fcb  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000022a8  00000000  00000000  00003ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004a9  00000000  00000000  00005d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a4  00000000  00000000  00006238  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001802  00000000  00000000  000063dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003cf  00000000  00000000  00007bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00007fad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_7>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_23>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_29>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e2       	ldi	r17, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	e7 e6       	ldi	r30, 0x67	; 103
  a4:	f9 e0       	ldi	r31, 0x09	; 9
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	28 e2       	ldi	r18, 0x28	; 40
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b8 e2       	ldi	r27, 0x28	; 40
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 a7 04 	jmp	0x94e	; 0x94e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
void initialize_ADC();
void deactivate_alarm();

int main()
{
    PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc; // Select pin 5
  ce:	e0 ea       	ldi	r30, 0xA0	; 160
  d0:	f4 e0       	ldi	r31, 0x04	; 4
  d2:	85 89       	ldd	r24, Z+21	; 0x15
  d4:	89 60       	ori	r24, 0x09	; 9
  d6:	85 8b       	std	Z+21, r24	; 0x15
    PORTF.PIN6CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc; // select pin 6
  d8:	86 89       	ldd	r24, Z+22	; 0x16
  da:	89 60       	ori	r24, 0x09	; 9
  dc:	86 8b       	std	Z+22, r24	; 0x16

    sei(); // Enable interrupts
  de:	78 94       	sei

    while (1)
    {
        printf("Waiting for input...");
  e0:	82 e5       	ldi	r24, 0x52	; 82
  e2:	99 e4       	ldi	r25, 0x49	; 73
  e4:	9f 93       	push	r25
  e6:	8f 93       	push	r24
  e8:	0e 94 cf 01 	call	0x39e	; 0x39e <printf>
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	f7 cf       	rjmp	.-18     	; 0xe0 <main+0x12>

000000f2 <initialize_TCA_as_Timer>:
    }
}

void initialize_TCA_as_Timer()
{
    TCA0.SINGLE.CNT = 0;                              // Clear counter
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	fa e0       	ldi	r31, 0x0A	; 10
  f6:	10 a2       	std	Z+32, r1	; 0x20
  f8:	11 a2       	std	Z+33, r1	; 0x21
    TCA0.SINGLE.CTRLB = 0;                            // Normal mode (counter)
  fa:	11 82       	std	Z+1, r1	; 0x01
    TCA0.SINGLE.CMP0 = timer_length;                  // When counter reaches this value -> interrupt clock frequency/1024
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	80 a7       	std	Z+40, r24	; 0x28
 102:	91 a7       	std	Z+41, r25	; 0x29
    TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc; // Frequency of counter
 104:	8e e0       	ldi	r24, 0x0E	; 14
 106:	80 83       	st	Z, r24
    TCA0.SINGLE.CTRLA |= 1;                           // Enable
 108:	80 81       	ld	r24, Z
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	80 83       	st	Z, r24
    TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm;         // Interrupt Enable for counter
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	82 87       	std	Z+10, r24	; 0x0a
 112:	08 95       	ret

00000114 <initialize_TCA_as_PWM_gen>:
}

void initialize_TCA_as_PWM_gen()
{
    TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV64_gc;        // Prescaler = 64
 114:	e0 e0       	ldi	r30, 0x00	; 0
 116:	fa e0       	ldi	r31, 0x0A	; 10
 118:	8a e0       	ldi	r24, 0x0A	; 10
 11a:	80 83       	st	Z, r24
    TCA0.SINGLE.PER = pwm_per;                             // Select the resolution
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	86 a3       	std	Z+38, r24	; 0x26
 122:	97 a3       	std	Z+39, r25	; 0x27
    TCA0.SINGLE.CMP0 = pwm_per / 2;                        // Select the duty cycle to be half the period
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	80 a7       	std	Z+40, r24	; 0x28
 12a:	91 a7       	std	Z+41, r25	; 0x29
    TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_SINGLESLOPE_gc; // Select Single_Slope_PWM
 12c:	81 81       	ldd	r24, Z+1	; 0x01
 12e:	83 60       	ori	r24, 0x03	; 3
 130:	81 83       	std	Z+1, r24	; 0x01
    TCA0.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;               // Enable interrupt overflow
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	82 87       	std	Z+10, r24	; 0x0a
    TCA0.SINGLE.INTCTRL |= TCA_SINGLE_CMP0_bm;             // Enable interrupt COMP0
 136:	82 85       	ldd	r24, Z+10	; 0x0a
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	82 87       	std	Z+10, r24	; 0x0a
    TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;             // Enable
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <initialize_ADC>:
}

// Initialize the ADC for Free-Running mode
void initialize_ADC()
{
    ADC0.CTRLA |= ADC_RESSEL_10BIT_gc; // 10-bit resolution
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	f6 e0       	ldi	r31, 0x06	; 6
 148:	80 81       	ld	r24, Z
 14a:	80 83       	st	Z, r24
    ADC0.CTRLA |= ADC_FREERUN_bm;      // Free-Running mode enabled
 14c:	80 81       	ld	r24, Z
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	80 83       	st	Z, r24
    ADC0.CTRLA |= ADC_ENABLE_bm;       // Enable ADC
 152:	80 81       	ld	r24, Z
 154:	81 60       	ori	r24, 0x01	; 1
 156:	80 83       	st	Z, r24
    ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc; // The bit
 158:	86 81       	ldd	r24, Z+6	; 0x06
 15a:	87 60       	ori	r24, 0x07	; 7
 15c:	86 83       	std	Z+6, r24	; 0x06
    ADC0.DBGCTRL |= ADC_DBGRUN_bm;     // Enable Debug Mode
 15e:	84 85       	ldd	r24, Z+12	; 0x0c
 160:	81 60       	ori	r24, 0x01	; 1
 162:	84 87       	std	Z+12, r24	; 0x0c
    // Window Comparator Mode
    ADC0.WINLT |= 24;            // Set threshold
 164:	82 89       	ldd	r24, Z+18	; 0x12
 166:	93 89       	ldd	r25, Z+19	; 0x13
 168:	88 61       	ori	r24, 0x18	; 24
 16a:	82 8b       	std	Z+18, r24	; 0x12
 16c:	93 8b       	std	Z+19, r25	; 0x13
    ADC0.INTCTRL |= ADC_WCMP_bm; // Enable Interrupts for WCM
 16e:	82 85       	ldd	r24, Z+10	; 0x0a
 170:	82 60       	ori	r24, 0x02	; 2
 172:	82 87       	std	Z+10, r24	; 0x0a
    ADC0.CTRLE |= ADC_WINCM0_bm; // Interrupt when Result < WINLT
 174:	84 81       	ldd	r24, Z+4	; 0x04
 176:	81 60       	ori	r24, 0x01	; 1
 178:	84 83       	std	Z+4, r24	; 0x04
    ADC0.COMMAND |= ADC_STCONV_bm;
 17a:	80 85       	ldd	r24, Z+8	; 0x08
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	80 87       	std	Z+8, r24	; 0x08
 180:	08 95       	ret

00000182 <deactivate_alarm>:
}

void deactivate_alarm()
{
    state = 1;             // Set initial state.
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <state>
 18a:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <state+0x1>
    PORTD.OUTCLR = 1;      // LED 0 ON
 18e:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
    ADC0.CTRLA = 0;        // ADC OFF
 192:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
    TCA0.SINGLE.CTRLA = 0; // TCA OFF
 196:	e0 e0       	ldi	r30, 0x00	; 0
 198:	fa e0       	ldi	r31, 0x0A	; 10
 19a:	10 82       	st	Z, r1
    TCA0.SINGLE.INTCTRL = 0;
 19c:	12 86       	std	Z+10, r1	; 0x0a
 19e:	08 95       	ret

000001a0 <__vector_7>:
}

// ISR Functions Declaration
// TCA0 Overflow ISR
ISR(TCA0_OVF_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
    int intflags = TCA0.SINGLE.INTFLAGS;
 1b0:	e0 e0       	ldi	r30, 0x00	; 0
 1b2:	fa e0       	ldi	r31, 0x0A	; 10
 1b4:	83 85       	ldd	r24, Z+11	; 0x0b
    TCA0.SINGLE.INTFLAGS = intflags;
 1b6:	83 87       	std	Z+11, r24	; 0x0b
    PORTD.OUTSET = 1; // LED 0 OFF
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f4465>
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_9>:

// TCA0 CMP ISR
ISR(TCA0_CMP0_vect)
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
    TCA0.SINGLE.CTRLA = 0;
 1f0:	e0 e0       	ldi	r30, 0x00	; 0
 1f2:	fa e0       	ldi	r31, 0x0A	; 10
 1f4:	10 82       	st	Z, r1
    int intflags = TCA0.SINGLE.INTFLAGS;
 1f6:	83 85       	ldd	r24, Z+11	; 0x0b
    TCA0.SINGLE.INTFLAGS = intflags;
 1f8:	83 87       	std	Z+11, r24	; 0x0b
    if (state == 1)
 1fa:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <state>
 1fe:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <state+0x1>
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	61 f4       	brne	.+24     	; 0x21e <__vector_9+0x50>
    {
        initialize_ADC();
 206:	0e 94 a2 00 	call	0x144	; 0x144 <initialize_ADC>
        state++; // State 2 (Siren Activated)
 20a:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <state>
 20e:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <state+0x1>
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <state>
 218:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <state+0x1>
 21c:	02 c0       	rjmp	.+4      	; 0x222 <__vector_9+0x54>
    }
    else
        initialize_TCA_as_PWM_gen();
 21e:	0e 94 8a 00 	call	0x114	; 0x114 <initialize_TCA_as_PWM_gen>
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__vector_23>:

// ADC ISR
ISR(ADC0_WCOMP_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
    int intflags = ADC0.INTFLAGS;
 266:	e0 e0       	ldi	r30, 0x00	; 0
 268:	f6 e0       	ldi	r31, 0x06	; 6
 26a:	83 85       	ldd	r24, Z+11	; 0x0b
    ADC0.INTFLAGS = intflags;
 26c:	83 87       	std	Z+11, r24	; 0x0b
    PORTD.OUTCLR = 1; // LED 0 ON
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
    initialize_TCA_as_Timer();
 274:	0e 94 79 00 	call	0xf2	; 0xf2 <initialize_TCA_as_Timer>
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <__vector_29>:

// Switch ISR
ISR(PORTF_PORT_vect)
{
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
    // Checking password 6556
    int intflags = PORTF.INTFLAGS;
 2bc:	e0 ea       	ldi	r30, 0xA0	; 160
 2be:	f4 e0       	ldi	r31, 0x04	; 4
 2c0:	81 85       	ldd	r24, Z+9	; 0x09
    PORTF.INTFLAGS = intflags;
 2c2:	81 87       	std	Z+9, r24	; 0x09
    // Checking which SW triggered the ISR

    // Triggered by SW5
    if (intflags == 0x20)
 2c4:	80 32       	cpi	r24, 0x20	; 32
 2c6:	71 f4       	brne	.+28     	; 0x2e4 <__vector_29+0x4a>
    {
        // Check digit position with current_password_digit
        // if 5 is insterted while not in one of the correct positions
        // raise wrong password flag
        if (current_password_digit != 2 && current_password_digit != 3)
 2c8:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 2cc:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 2d0:	02 97       	sbiw	r24, 0x02	; 2
 2d2:	02 97       	sbiw	r24, 0x02	; 2
 2d4:	b0 f0       	brcs	.+44     	; 0x302 <__vector_29+0x68>
            wrong_password = 1;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <wrong_password>
 2de:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <wrong_password+0x1>
 2e2:	0f c0       	rjmp	.+30     	; 0x302 <__vector_29+0x68>
    }
    // Triggered by SW6
    // Same check as for SW5
    else if (current_password_digit != 1 && current_password_digit != 4)
 2e4:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 2e8:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	91 05       	cpc	r25, r1
 2f0:	41 f0       	breq	.+16     	; 0x302 <__vector_29+0x68>
 2f2:	04 97       	sbiw	r24, 0x04	; 4
 2f4:	31 f0       	breq	.+12     	; 0x302 <__vector_29+0x68>
        wrong_password = 1;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <wrong_password>
 2fe:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <wrong_password+0x1>

    // After all digits have been entered
    // accept password if wrong_password flag = 0
    // otherwise reject it.
    if (current_password_digit == 4)
 302:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 306:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 30a:	84 30       	cpi	r24, 0x04	; 4
 30c:	91 05       	cpc	r25, r1
 30e:	89 f5       	brne	.+98     	; 0x372 <__vector_29+0xd8>
    {
        if (wrong_password != 1)
 310:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <wrong_password>
 314:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <wrong_password+0x1>
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	81 f0       	breq	.+32     	; 0x33c <__vector_29+0xa2>
        {
            // Password accepted.
            wrong_password_count = 0;
 31c:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <__data_end>
 320:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <__data_end+0x1>
            if (state == 1)
 324:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <state>
 328:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <state+0x1>
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	19 f4       	brne	.+6      	; 0x336 <__vector_29+0x9c>
                initialize_TCA_as_Timer();
 330:	0e 94 79 00 	call	0xf2	; 0xf2 <initialize_TCA_as_Timer>
 334:	17 c0       	rjmp	.+46     	; 0x364 <__vector_29+0xca>
            else
                deactivate_alarm();
 336:	0e 94 c1 00 	call	0x182	; 0x182 <deactivate_alarm>
 33a:	14 c0       	rjmp	.+40     	; 0x364 <__vector_29+0xca>
        }
        else
        {
            wrong_password_count++;
 33c:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
 340:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <__data_end+0x1>
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <__data_end>
 34a:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <__data_end+0x1>
            if (state == 2 && wrong_password_count == 3)
 34e:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <state>
 352:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <state+0x1>
 356:	22 30       	cpi	r18, 0x02	; 2
 358:	31 05       	cpc	r19, r1
 35a:	21 f4       	brne	.+8      	; 0x364 <__vector_29+0xca>
 35c:	03 97       	sbiw	r24, 0x03	; 3
 35e:	11 f4       	brne	.+4      	; 0x364 <__vector_29+0xca>
                initialize_TCA_as_PWM_gen();
 360:	0e 94 8a 00 	call	0x114	; 0x114 <initialize_TCA_as_PWM_gen>
        }
        current_password_digit = 1;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 36c:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 370:	05 c0       	rjmp	.+10     	; 0x37c <__vector_29+0xe2>
    }
    else
        current_password_digit++;
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 378:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	bf 91       	pop	r27
 382:	af 91       	pop	r26
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	7f 91       	pop	r23
 38a:	6f 91       	pop	r22
 38c:	5f 91       	pop	r21
 38e:	4f 91       	pop	r20
 390:	3f 91       	pop	r19
 392:	2f 91       	pop	r18
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <printf>:
 39e:	a0 e0       	ldi	r26, 0x00	; 0
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	e5 ed       	ldi	r30, 0xD5	; 213
 3a4:	f1 e0       	ldi	r31, 0x01	; 1
 3a6:	0c 94 86 04 	jmp	0x90c	; 0x90c <__prologue_saves__+0x20>
 3aa:	ae 01       	movw	r20, r28
 3ac:	4b 5f       	subi	r20, 0xFB	; 251
 3ae:	5f 4f       	sbci	r21, 0xFF	; 255
 3b0:	fa 01       	movw	r30, r20
 3b2:	61 91       	ld	r22, Z+
 3b4:	71 91       	ld	r23, Z+
 3b6:	af 01       	movw	r20, r30
 3b8:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <__iob+0x2>
 3bc:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <__iob+0x3>
 3c0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vfprintf>
 3c4:	e2 e0       	ldi	r30, 0x02	; 2
 3c6:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__epilogue_restores__+0x20>

000003ca <vfprintf>:
 3ca:	ab e0       	ldi	r26, 0x0B	; 11
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	eb ee       	ldi	r30, 0xEB	; 235
 3d0:	f1 e0       	ldi	r31, 0x01	; 1
 3d2:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__prologue_saves__>
 3d6:	6c 01       	movw	r12, r24
 3d8:	7b 01       	movw	r14, r22
 3da:	8a 01       	movw	r16, r20
 3dc:	fc 01       	movw	r30, r24
 3de:	16 82       	std	Z+6, r1	; 0x06
 3e0:	17 82       	std	Z+7, r1	; 0x07
 3e2:	83 81       	ldd	r24, Z+3	; 0x03
 3e4:	81 ff       	sbrs	r24, 1
 3e6:	cc c1       	rjmp	.+920    	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
 3e8:	ce 01       	movw	r24, r28
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	3c 01       	movw	r6, r24
 3ee:	f6 01       	movw	r30, r12
 3f0:	93 81       	ldd	r25, Z+3	; 0x03
 3f2:	f7 01       	movw	r30, r14
 3f4:	93 fd       	sbrc	r25, 3
 3f6:	85 91       	lpm	r24, Z+
 3f8:	93 ff       	sbrs	r25, 3
 3fa:	81 91       	ld	r24, Z+
 3fc:	7f 01       	movw	r14, r30
 3fe:	88 23       	and	r24, r24
 400:	09 f4       	brne	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	ba c1       	rjmp	.+884    	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
 404:	85 32       	cpi	r24, 0x25	; 37
 406:	39 f4       	brne	.+14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 408:	93 fd       	sbrc	r25, 3
 40a:	85 91       	lpm	r24, Z+
 40c:	93 ff       	sbrs	r25, 3
 40e:	81 91       	ld	r24, Z+
 410:	7f 01       	movw	r14, r30
 412:	85 32       	cpi	r24, 0x25	; 37
 414:	29 f4       	brne	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 416:	b6 01       	movw	r22, r12
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <fputc>
 41e:	e7 cf       	rjmp	.-50     	; 0x3ee <vfprintf+0x24>
 420:	91 2c       	mov	r9, r1
 422:	21 2c       	mov	r2, r1
 424:	31 2c       	mov	r3, r1
 426:	ff e1       	ldi	r31, 0x1F	; 31
 428:	f3 15       	cp	r31, r3
 42a:	d8 f0       	brcs	.+54     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 42c:	8b 32       	cpi	r24, 0x2B	; 43
 42e:	79 f0       	breq	.+30     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 430:	38 f4       	brcc	.+14     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 432:	80 32       	cpi	r24, 0x20	; 32
 434:	79 f0       	breq	.+30     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 436:	83 32       	cpi	r24, 0x23	; 35
 438:	a1 f4       	brne	.+40     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 43a:	23 2d       	mov	r18, r3
 43c:	20 61       	ori	r18, 0x10	; 16
 43e:	1d c0       	rjmp	.+58     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 440:	8d 32       	cpi	r24, 0x2D	; 45
 442:	61 f0       	breq	.+24     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 444:	80 33       	cpi	r24, 0x30	; 48
 446:	69 f4       	brne	.+26     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 448:	23 2d       	mov	r18, r3
 44a:	21 60       	ori	r18, 0x01	; 1
 44c:	16 c0       	rjmp	.+44     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 44e:	83 2d       	mov	r24, r3
 450:	82 60       	ori	r24, 0x02	; 2
 452:	38 2e       	mov	r3, r24
 454:	e3 2d       	mov	r30, r3
 456:	e4 60       	ori	r30, 0x04	; 4
 458:	3e 2e       	mov	r3, r30
 45a:	2a c0       	rjmp	.+84     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 45c:	f3 2d       	mov	r31, r3
 45e:	f8 60       	ori	r31, 0x08	; 8
 460:	1d c0       	rjmp	.+58     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 462:	37 fc       	sbrc	r3, 7
 464:	2d c0       	rjmp	.+90     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 466:	20 ed       	ldi	r18, 0xD0	; 208
 468:	28 0f       	add	r18, r24
 46a:	2a 30       	cpi	r18, 0x0A	; 10
 46c:	40 f0       	brcs	.+16     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 46e:	8e 32       	cpi	r24, 0x2E	; 46
 470:	b9 f4       	brne	.+46     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 472:	36 fc       	sbrc	r3, 6
 474:	81 c1       	rjmp	.+770    	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
 476:	23 2d       	mov	r18, r3
 478:	20 64       	ori	r18, 0x40	; 64
 47a:	32 2e       	mov	r3, r18
 47c:	19 c0       	rjmp	.+50     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 47e:	36 fe       	sbrs	r3, 6
 480:	06 c0       	rjmp	.+12     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 482:	8a e0       	ldi	r24, 0x0A	; 10
 484:	98 9e       	mul	r9, r24
 486:	20 0d       	add	r18, r0
 488:	11 24       	eor	r1, r1
 48a:	92 2e       	mov	r9, r18
 48c:	11 c0       	rjmp	.+34     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 48e:	ea e0       	ldi	r30, 0x0A	; 10
 490:	2e 9e       	mul	r2, r30
 492:	20 0d       	add	r18, r0
 494:	11 24       	eor	r1, r1
 496:	22 2e       	mov	r2, r18
 498:	f3 2d       	mov	r31, r3
 49a:	f0 62       	ori	r31, 0x20	; 32
 49c:	3f 2e       	mov	r3, r31
 49e:	08 c0       	rjmp	.+16     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4a0:	8c 36       	cpi	r24, 0x6C	; 108
 4a2:	21 f4       	brne	.+8      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4a4:	83 2d       	mov	r24, r3
 4a6:	80 68       	ori	r24, 0x80	; 128
 4a8:	38 2e       	mov	r3, r24
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4ac:	88 36       	cpi	r24, 0x68	; 104
 4ae:	41 f4       	brne	.+16     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4b0:	f7 01       	movw	r30, r14
 4b2:	93 fd       	sbrc	r25, 3
 4b4:	85 91       	lpm	r24, Z+
 4b6:	93 ff       	sbrs	r25, 3
 4b8:	81 91       	ld	r24, Z+
 4ba:	7f 01       	movw	r14, r30
 4bc:	81 11       	cpse	r24, r1
 4be:	b3 cf       	rjmp	.-154    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 4c0:	98 2f       	mov	r25, r24
 4c2:	9f 7d       	andi	r25, 0xDF	; 223
 4c4:	95 54       	subi	r25, 0x45	; 69
 4c6:	93 30       	cpi	r25, 0x03	; 3
 4c8:	28 f4       	brcc	.+10     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4ca:	0c 5f       	subi	r16, 0xFC	; 252
 4cc:	1f 4f       	sbci	r17, 0xFF	; 255
 4ce:	9f e3       	ldi	r25, 0x3F	; 63
 4d0:	99 83       	std	Y+1, r25	; 0x01
 4d2:	0d c0       	rjmp	.+26     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4d4:	83 36       	cpi	r24, 0x63	; 99
 4d6:	31 f0       	breq	.+12     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4d8:	83 37       	cpi	r24, 0x73	; 115
 4da:	71 f0       	breq	.+28     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4dc:	83 35       	cpi	r24, 0x53	; 83
 4de:	09 f0       	breq	.+2      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e0:	59 c0       	rjmp	.+178    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 4e2:	21 c0       	rjmp	.+66     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 4e4:	f8 01       	movw	r30, r16
 4e6:	80 81       	ld	r24, Z
 4e8:	89 83       	std	Y+1, r24	; 0x01
 4ea:	0e 5f       	subi	r16, 0xFE	; 254
 4ec:	1f 4f       	sbci	r17, 0xFF	; 255
 4ee:	88 24       	eor	r8, r8
 4f0:	83 94       	inc	r8
 4f2:	91 2c       	mov	r9, r1
 4f4:	53 01       	movw	r10, r6
 4f6:	13 c0       	rjmp	.+38     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 4f8:	28 01       	movw	r4, r16
 4fa:	f2 e0       	ldi	r31, 0x02	; 2
 4fc:	4f 0e       	add	r4, r31
 4fe:	51 1c       	adc	r5, r1
 500:	f8 01       	movw	r30, r16
 502:	a0 80       	ld	r10, Z
 504:	b1 80       	ldd	r11, Z+1	; 0x01
 506:	36 fe       	sbrs	r3, 6
 508:	03 c0       	rjmp	.+6      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 50a:	69 2d       	mov	r22, r9
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 510:	6f ef       	ldi	r22, 0xFF	; 255
 512:	7f ef       	ldi	r23, 0xFF	; 255
 514:	c5 01       	movw	r24, r10
 516:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <strnlen>
 51a:	4c 01       	movw	r8, r24
 51c:	82 01       	movw	r16, r4
 51e:	f3 2d       	mov	r31, r3
 520:	ff 77       	andi	r31, 0x7F	; 127
 522:	3f 2e       	mov	r3, r31
 524:	16 c0       	rjmp	.+44     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 526:	28 01       	movw	r4, r16
 528:	22 e0       	ldi	r18, 0x02	; 2
 52a:	42 0e       	add	r4, r18
 52c:	51 1c       	adc	r5, r1
 52e:	f8 01       	movw	r30, r16
 530:	a0 80       	ld	r10, Z
 532:	b1 80       	ldd	r11, Z+1	; 0x01
 534:	36 fe       	sbrs	r3, 6
 536:	03 c0       	rjmp	.+6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 538:	69 2d       	mov	r22, r9
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 53e:	6f ef       	ldi	r22, 0xFF	; 255
 540:	7f ef       	ldi	r23, 0xFF	; 255
 542:	c5 01       	movw	r24, r10
 544:	0e 94 c6 03 	call	0x78c	; 0x78c <strnlen_P>
 548:	4c 01       	movw	r8, r24
 54a:	f3 2d       	mov	r31, r3
 54c:	f0 68       	ori	r31, 0x80	; 128
 54e:	3f 2e       	mov	r3, r31
 550:	82 01       	movw	r16, r4
 552:	33 fc       	sbrc	r3, 3
 554:	1b c0       	rjmp	.+54     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 556:	82 2d       	mov	r24, r2
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	88 16       	cp	r8, r24
 55c:	99 06       	cpc	r9, r25
 55e:	b0 f4       	brcc	.+44     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 560:	b6 01       	movw	r22, r12
 562:	80 e2       	ldi	r24, 0x20	; 32
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <fputc>
 56a:	2a 94       	dec	r2
 56c:	f4 cf       	rjmp	.-24     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 56e:	f5 01       	movw	r30, r10
 570:	37 fc       	sbrc	r3, 7
 572:	85 91       	lpm	r24, Z+
 574:	37 fe       	sbrs	r3, 7
 576:	81 91       	ld	r24, Z+
 578:	5f 01       	movw	r10, r30
 57a:	b6 01       	movw	r22, r12
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <fputc>
 582:	21 10       	cpse	r2, r1
 584:	2a 94       	dec	r2
 586:	21 e0       	ldi	r18, 0x01	; 1
 588:	82 1a       	sub	r8, r18
 58a:	91 08       	sbc	r9, r1
 58c:	81 14       	cp	r8, r1
 58e:	91 04       	cpc	r9, r1
 590:	71 f7       	brne	.-36     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 592:	e8 c0       	rjmp	.+464    	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
 594:	84 36       	cpi	r24, 0x64	; 100
 596:	11 f0       	breq	.+4      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 598:	89 36       	cpi	r24, 0x69	; 105
 59a:	41 f5       	brne	.+80     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 59c:	f8 01       	movw	r30, r16
 59e:	37 fe       	sbrs	r3, 7
 5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5a2:	60 81       	ld	r22, Z
 5a4:	71 81       	ldd	r23, Z+1	; 0x01
 5a6:	82 81       	ldd	r24, Z+2	; 0x02
 5a8:	93 81       	ldd	r25, Z+3	; 0x03
 5aa:	0c 5f       	subi	r16, 0xFC	; 252
 5ac:	1f 4f       	sbci	r17, 0xFF	; 255
 5ae:	08 c0       	rjmp	.+16     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5b0:	60 81       	ld	r22, Z
 5b2:	71 81       	ldd	r23, Z+1	; 0x01
 5b4:	07 2e       	mov	r0, r23
 5b6:	00 0c       	add	r0, r0
 5b8:	88 0b       	sbc	r24, r24
 5ba:	99 0b       	sbc	r25, r25
 5bc:	0e 5f       	subi	r16, 0xFE	; 254
 5be:	1f 4f       	sbci	r17, 0xFF	; 255
 5c0:	f3 2d       	mov	r31, r3
 5c2:	ff 76       	andi	r31, 0x6F	; 111
 5c4:	3f 2e       	mov	r3, r31
 5c6:	97 ff       	sbrs	r25, 7
 5c8:	09 c0       	rjmp	.+18     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5ca:	90 95       	com	r25
 5cc:	80 95       	com	r24
 5ce:	70 95       	com	r23
 5d0:	61 95       	neg	r22
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	8f 4f       	sbci	r24, 0xFF	; 255
 5d6:	9f 4f       	sbci	r25, 0xFF	; 255
 5d8:	f0 68       	ori	r31, 0x80	; 128
 5da:	3f 2e       	mov	r3, r31
 5dc:	2a e0       	ldi	r18, 0x0A	; 10
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	a3 01       	movw	r20, r6
 5e2:	0e 94 18 04 	call	0x830	; 0x830 <__ultoa_invert>
 5e6:	88 2e       	mov	r8, r24
 5e8:	86 18       	sub	r8, r6
 5ea:	45 c0       	rjmp	.+138    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 5ec:	85 37       	cpi	r24, 0x75	; 117
 5ee:	31 f4       	brne	.+12     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5f0:	23 2d       	mov	r18, r3
 5f2:	2f 7e       	andi	r18, 0xEF	; 239
 5f4:	b2 2e       	mov	r11, r18
 5f6:	2a e0       	ldi	r18, 0x0A	; 10
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	25 c0       	rjmp	.+74     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 5fc:	93 2d       	mov	r25, r3
 5fe:	99 7f       	andi	r25, 0xF9	; 249
 600:	b9 2e       	mov	r11, r25
 602:	8f 36       	cpi	r24, 0x6F	; 111
 604:	c1 f0       	breq	.+48     	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 606:	18 f4       	brcc	.+6      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 608:	88 35       	cpi	r24, 0x58	; 88
 60a:	79 f0       	breq	.+30     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 60c:	b5 c0       	rjmp	.+362    	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
 60e:	80 37       	cpi	r24, 0x70	; 112
 610:	19 f0       	breq	.+6      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 612:	88 37       	cpi	r24, 0x78	; 120
 614:	21 f0       	breq	.+8      	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 616:	b0 c0       	rjmp	.+352    	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
 618:	e9 2f       	mov	r30, r25
 61a:	e0 61       	ori	r30, 0x10	; 16
 61c:	be 2e       	mov	r11, r30
 61e:	b4 fe       	sbrs	r11, 4
 620:	0d c0       	rjmp	.+26     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 622:	fb 2d       	mov	r31, r11
 624:	f4 60       	ori	r31, 0x04	; 4
 626:	bf 2e       	mov	r11, r31
 628:	09 c0       	rjmp	.+18     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 62a:	34 fe       	sbrs	r3, 4
 62c:	0a c0       	rjmp	.+20     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 62e:	29 2f       	mov	r18, r25
 630:	26 60       	ori	r18, 0x06	; 6
 632:	b2 2e       	mov	r11, r18
 634:	06 c0       	rjmp	.+12     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 636:	28 e0       	ldi	r18, 0x08	; 8
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	05 c0       	rjmp	.+10     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 63c:	20 e1       	ldi	r18, 0x10	; 16
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 642:	20 e1       	ldi	r18, 0x10	; 16
 644:	32 e0       	ldi	r19, 0x02	; 2
 646:	f8 01       	movw	r30, r16
 648:	b7 fe       	sbrs	r11, 7
 64a:	07 c0       	rjmp	.+14     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 64c:	60 81       	ld	r22, Z
 64e:	71 81       	ldd	r23, Z+1	; 0x01
 650:	82 81       	ldd	r24, Z+2	; 0x02
 652:	93 81       	ldd	r25, Z+3	; 0x03
 654:	0c 5f       	subi	r16, 0xFC	; 252
 656:	1f 4f       	sbci	r17, 0xFF	; 255
 658:	06 c0       	rjmp	.+12     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 65a:	60 81       	ld	r22, Z
 65c:	71 81       	ldd	r23, Z+1	; 0x01
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 5f       	subi	r16, 0xFE	; 254
 664:	1f 4f       	sbci	r17, 0xFF	; 255
 666:	a3 01       	movw	r20, r6
 668:	0e 94 18 04 	call	0x830	; 0x830 <__ultoa_invert>
 66c:	88 2e       	mov	r8, r24
 66e:	86 18       	sub	r8, r6
 670:	fb 2d       	mov	r31, r11
 672:	ff 77       	andi	r31, 0x7F	; 127
 674:	3f 2e       	mov	r3, r31
 676:	36 fe       	sbrs	r3, 6
 678:	0d c0       	rjmp	.+26     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 67a:	23 2d       	mov	r18, r3
 67c:	2e 7f       	andi	r18, 0xFE	; 254
 67e:	a2 2e       	mov	r10, r18
 680:	89 14       	cp	r8, r9
 682:	58 f4       	brcc	.+22     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 684:	34 fe       	sbrs	r3, 4
 686:	0b c0       	rjmp	.+22     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 688:	32 fc       	sbrc	r3, 2
 68a:	09 c0       	rjmp	.+18     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 68c:	83 2d       	mov	r24, r3
 68e:	8e 7e       	andi	r24, 0xEE	; 238
 690:	a8 2e       	mov	r10, r24
 692:	05 c0       	rjmp	.+10     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 694:	b8 2c       	mov	r11, r8
 696:	a3 2c       	mov	r10, r3
 698:	03 c0       	rjmp	.+6      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 69a:	b8 2c       	mov	r11, r8
 69c:	01 c0       	rjmp	.+2      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 69e:	b9 2c       	mov	r11, r9
 6a0:	a4 fe       	sbrs	r10, 4
 6a2:	0f c0       	rjmp	.+30     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6a4:	fe 01       	movw	r30, r28
 6a6:	e8 0d       	add	r30, r8
 6a8:	f1 1d       	adc	r31, r1
 6aa:	80 81       	ld	r24, Z
 6ac:	80 33       	cpi	r24, 0x30	; 48
 6ae:	21 f4       	brne	.+8      	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 6b0:	9a 2d       	mov	r25, r10
 6b2:	99 7e       	andi	r25, 0xE9	; 233
 6b4:	a9 2e       	mov	r10, r25
 6b6:	09 c0       	rjmp	.+18     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6b8:	a2 fe       	sbrs	r10, 2
 6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 6bc:	b3 94       	inc	r11
 6be:	b3 94       	inc	r11
 6c0:	04 c0       	rjmp	.+8      	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6c2:	8a 2d       	mov	r24, r10
 6c4:	86 78       	andi	r24, 0x86	; 134
 6c6:	09 f0       	breq	.+2      	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6c8:	b3 94       	inc	r11
 6ca:	a3 fc       	sbrc	r10, 3
 6cc:	11 c0       	rjmp	.+34     	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
 6ce:	a0 fe       	sbrs	r10, 0
 6d0:	06 c0       	rjmp	.+12     	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 6d2:	b2 14       	cp	r11, r2
 6d4:	88 f4       	brcc	.+34     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 6d6:	28 0c       	add	r2, r8
 6d8:	92 2c       	mov	r9, r2
 6da:	9b 18       	sub	r9, r11
 6dc:	0e c0       	rjmp	.+28     	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 6de:	b2 14       	cp	r11, r2
 6e0:	60 f4       	brcc	.+24     	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 6e2:	b6 01       	movw	r22, r12
 6e4:	80 e2       	ldi	r24, 0x20	; 32
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <fputc>
 6ec:	b3 94       	inc	r11
 6ee:	f7 cf       	rjmp	.-18     	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 6f0:	b2 14       	cp	r11, r2
 6f2:	18 f4       	brcc	.+6      	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 6f4:	2b 18       	sub	r2, r11
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 6f8:	98 2c       	mov	r9, r8
 6fa:	21 2c       	mov	r2, r1
 6fc:	a4 fe       	sbrs	r10, 4
 6fe:	10 c0       	rjmp	.+32     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 700:	b6 01       	movw	r22, r12
 702:	80 e3       	ldi	r24, 0x30	; 48
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <fputc>
 70a:	a2 fe       	sbrs	r10, 2
 70c:	17 c0       	rjmp	.+46     	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
 70e:	a1 fc       	sbrc	r10, 1
 710:	03 c0       	rjmp	.+6      	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
 712:	88 e7       	ldi	r24, 0x78	; 120
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	02 c0       	rjmp	.+4      	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
 718:	88 e5       	ldi	r24, 0x58	; 88
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	b6 01       	movw	r22, r12
 71e:	0c c0       	rjmp	.+24     	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 720:	8a 2d       	mov	r24, r10
 722:	86 78       	andi	r24, 0x86	; 134
 724:	59 f0       	breq	.+22     	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
 726:	a1 fe       	sbrs	r10, 1
 728:	02 c0       	rjmp	.+4      	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 72a:	8b e2       	ldi	r24, 0x2B	; 43
 72c:	01 c0       	rjmp	.+2      	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 72e:	80 e2       	ldi	r24, 0x20	; 32
 730:	a7 fc       	sbrc	r10, 7
 732:	8d e2       	ldi	r24, 0x2D	; 45
 734:	b6 01       	movw	r22, r12
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <fputc>
 73c:	89 14       	cp	r8, r9
 73e:	38 f4       	brcc	.+14     	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 740:	b6 01       	movw	r22, r12
 742:	80 e3       	ldi	r24, 0x30	; 48
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <fputc>
 74a:	9a 94       	dec	r9
 74c:	f7 cf       	rjmp	.-18     	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
 74e:	8a 94       	dec	r8
 750:	f3 01       	movw	r30, r6
 752:	e8 0d       	add	r30, r8
 754:	f1 1d       	adc	r31, r1
 756:	80 81       	ld	r24, Z
 758:	b6 01       	movw	r22, r12
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <fputc>
 760:	81 10       	cpse	r8, r1
 762:	f5 cf       	rjmp	.-22     	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 764:	22 20       	and	r2, r2
 766:	09 f4       	brne	.+2      	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
 768:	42 ce       	rjmp	.-892    	; 0x3ee <vfprintf+0x24>
 76a:	b6 01       	movw	r22, r12
 76c:	80 e2       	ldi	r24, 0x20	; 32
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <fputc>
 774:	2a 94       	dec	r2
 776:	f6 cf       	rjmp	.-20     	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
 778:	f6 01       	movw	r30, r12
 77a:	86 81       	ldd	r24, Z+6	; 0x06
 77c:	97 81       	ldd	r25, Z+7	; 0x07
 77e:	02 c0       	rjmp	.+4      	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
 780:	8f ef       	ldi	r24, 0xFF	; 255
 782:	9f ef       	ldi	r25, 0xFF	; 255
 784:	2b 96       	adiw	r28, 0x0b	; 11
 786:	e2 e1       	ldi	r30, 0x12	; 18
 788:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__epilogue_restores__>

0000078c <strnlen_P>:
 78c:	fc 01       	movw	r30, r24
 78e:	05 90       	lpm	r0, Z+
 790:	61 50       	subi	r22, 0x01	; 1
 792:	70 40       	sbci	r23, 0x00	; 0
 794:	01 10       	cpse	r0, r1
 796:	d8 f7       	brcc	.-10     	; 0x78e <strnlen_P+0x2>
 798:	80 95       	com	r24
 79a:	90 95       	com	r25
 79c:	8e 0f       	add	r24, r30
 79e:	9f 1f       	adc	r25, r31
 7a0:	08 95       	ret

000007a2 <strnlen>:
 7a2:	fc 01       	movw	r30, r24
 7a4:	61 50       	subi	r22, 0x01	; 1
 7a6:	70 40       	sbci	r23, 0x00	; 0
 7a8:	01 90       	ld	r0, Z+
 7aa:	01 10       	cpse	r0, r1
 7ac:	d8 f7       	brcc	.-10     	; 0x7a4 <strnlen+0x2>
 7ae:	80 95       	com	r24
 7b0:	90 95       	com	r25
 7b2:	8e 0f       	add	r24, r30
 7b4:	9f 1f       	adc	r25, r31
 7b6:	08 95       	ret

000007b8 <fputc>:
 7b8:	0f 93       	push	r16
 7ba:	1f 93       	push	r17
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	fb 01       	movw	r30, r22
 7c2:	23 81       	ldd	r18, Z+3	; 0x03
 7c4:	21 fd       	sbrc	r18, 1
 7c6:	03 c0       	rjmp	.+6      	; 0x7ce <fputc+0x16>
 7c8:	8f ef       	ldi	r24, 0xFF	; 255
 7ca:	9f ef       	ldi	r25, 0xFF	; 255
 7cc:	2c c0       	rjmp	.+88     	; 0x826 <fputc+0x6e>
 7ce:	22 ff       	sbrs	r18, 2
 7d0:	16 c0       	rjmp	.+44     	; 0x7fe <fputc+0x46>
 7d2:	46 81       	ldd	r20, Z+6	; 0x06
 7d4:	57 81       	ldd	r21, Z+7	; 0x07
 7d6:	24 81       	ldd	r18, Z+4	; 0x04
 7d8:	35 81       	ldd	r19, Z+5	; 0x05
 7da:	42 17       	cp	r20, r18
 7dc:	53 07       	cpc	r21, r19
 7de:	44 f4       	brge	.+16     	; 0x7f0 <fputc+0x38>
 7e0:	a0 81       	ld	r26, Z
 7e2:	b1 81       	ldd	r27, Z+1	; 0x01
 7e4:	9d 01       	movw	r18, r26
 7e6:	2f 5f       	subi	r18, 0xFF	; 255
 7e8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ea:	20 83       	st	Z, r18
 7ec:	31 83       	std	Z+1, r19	; 0x01
 7ee:	8c 93       	st	X, r24
 7f0:	26 81       	ldd	r18, Z+6	; 0x06
 7f2:	37 81       	ldd	r19, Z+7	; 0x07
 7f4:	2f 5f       	subi	r18, 0xFF	; 255
 7f6:	3f 4f       	sbci	r19, 0xFF	; 255
 7f8:	26 83       	std	Z+6, r18	; 0x06
 7fa:	37 83       	std	Z+7, r19	; 0x07
 7fc:	14 c0       	rjmp	.+40     	; 0x826 <fputc+0x6e>
 7fe:	8b 01       	movw	r16, r22
 800:	ec 01       	movw	r28, r24
 802:	fb 01       	movw	r30, r22
 804:	00 84       	ldd	r0, Z+8	; 0x08
 806:	f1 85       	ldd	r31, Z+9	; 0x09
 808:	e0 2d       	mov	r30, r0
 80a:	09 95       	icall
 80c:	89 2b       	or	r24, r25
 80e:	e1 f6       	brne	.-72     	; 0x7c8 <fputc+0x10>
 810:	d8 01       	movw	r26, r16
 812:	16 96       	adiw	r26, 0x06	; 6
 814:	8d 91       	ld	r24, X+
 816:	9c 91       	ld	r25, X
 818:	17 97       	sbiw	r26, 0x07	; 7
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	16 96       	adiw	r26, 0x06	; 6
 81e:	8d 93       	st	X+, r24
 820:	9c 93       	st	X, r25
 822:	17 97       	sbiw	r26, 0x07	; 7
 824:	ce 01       	movw	r24, r28
 826:	df 91       	pop	r29
 828:	cf 91       	pop	r28
 82a:	1f 91       	pop	r17
 82c:	0f 91       	pop	r16
 82e:	08 95       	ret

00000830 <__ultoa_invert>:
 830:	fa 01       	movw	r30, r20
 832:	aa 27       	eor	r26, r26
 834:	28 30       	cpi	r18, 0x08	; 8
 836:	51 f1       	breq	.+84     	; 0x88c <__ultoa_invert+0x5c>
 838:	20 31       	cpi	r18, 0x10	; 16
 83a:	81 f1       	breq	.+96     	; 0x89c <__ultoa_invert+0x6c>
 83c:	e8 94       	clt
 83e:	6f 93       	push	r22
 840:	6e 7f       	andi	r22, 0xFE	; 254
 842:	6e 5f       	subi	r22, 0xFE	; 254
 844:	7f 4f       	sbci	r23, 0xFF	; 255
 846:	8f 4f       	sbci	r24, 0xFF	; 255
 848:	9f 4f       	sbci	r25, 0xFF	; 255
 84a:	af 4f       	sbci	r26, 0xFF	; 255
 84c:	b1 e0       	ldi	r27, 0x01	; 1
 84e:	3e d0       	rcall	.+124    	; 0x8cc <__ultoa_invert+0x9c>
 850:	b4 e0       	ldi	r27, 0x04	; 4
 852:	3c d0       	rcall	.+120    	; 0x8cc <__ultoa_invert+0x9c>
 854:	67 0f       	add	r22, r23
 856:	78 1f       	adc	r23, r24
 858:	89 1f       	adc	r24, r25
 85a:	9a 1f       	adc	r25, r26
 85c:	a1 1d       	adc	r26, r1
 85e:	68 0f       	add	r22, r24
 860:	79 1f       	adc	r23, r25
 862:	8a 1f       	adc	r24, r26
 864:	91 1d       	adc	r25, r1
 866:	a1 1d       	adc	r26, r1
 868:	6a 0f       	add	r22, r26
 86a:	71 1d       	adc	r23, r1
 86c:	81 1d       	adc	r24, r1
 86e:	91 1d       	adc	r25, r1
 870:	a1 1d       	adc	r26, r1
 872:	20 d0       	rcall	.+64     	; 0x8b4 <__ultoa_invert+0x84>
 874:	09 f4       	brne	.+2      	; 0x878 <__ultoa_invert+0x48>
 876:	68 94       	set
 878:	3f 91       	pop	r19
 87a:	2a e0       	ldi	r18, 0x0A	; 10
 87c:	26 9f       	mul	r18, r22
 87e:	11 24       	eor	r1, r1
 880:	30 19       	sub	r19, r0
 882:	30 5d       	subi	r19, 0xD0	; 208
 884:	31 93       	st	Z+, r19
 886:	de f6       	brtc	.-74     	; 0x83e <__ultoa_invert+0xe>
 888:	cf 01       	movw	r24, r30
 88a:	08 95       	ret
 88c:	46 2f       	mov	r20, r22
 88e:	47 70       	andi	r20, 0x07	; 7
 890:	40 5d       	subi	r20, 0xD0	; 208
 892:	41 93       	st	Z+, r20
 894:	b3 e0       	ldi	r27, 0x03	; 3
 896:	0f d0       	rcall	.+30     	; 0x8b6 <__ultoa_invert+0x86>
 898:	c9 f7       	brne	.-14     	; 0x88c <__ultoa_invert+0x5c>
 89a:	f6 cf       	rjmp	.-20     	; 0x888 <__ultoa_invert+0x58>
 89c:	46 2f       	mov	r20, r22
 89e:	4f 70       	andi	r20, 0x0F	; 15
 8a0:	40 5d       	subi	r20, 0xD0	; 208
 8a2:	4a 33       	cpi	r20, 0x3A	; 58
 8a4:	18 f0       	brcs	.+6      	; 0x8ac <__ultoa_invert+0x7c>
 8a6:	49 5d       	subi	r20, 0xD9	; 217
 8a8:	31 fd       	sbrc	r19, 1
 8aa:	40 52       	subi	r20, 0x20	; 32
 8ac:	41 93       	st	Z+, r20
 8ae:	02 d0       	rcall	.+4      	; 0x8b4 <__ultoa_invert+0x84>
 8b0:	a9 f7       	brne	.-22     	; 0x89c <__ultoa_invert+0x6c>
 8b2:	ea cf       	rjmp	.-44     	; 0x888 <__ultoa_invert+0x58>
 8b4:	b4 e0       	ldi	r27, 0x04	; 4
 8b6:	a6 95       	lsr	r26
 8b8:	97 95       	ror	r25
 8ba:	87 95       	ror	r24
 8bc:	77 95       	ror	r23
 8be:	67 95       	ror	r22
 8c0:	ba 95       	dec	r27
 8c2:	c9 f7       	brne	.-14     	; 0x8b6 <__ultoa_invert+0x86>
 8c4:	00 97       	sbiw	r24, 0x00	; 0
 8c6:	61 05       	cpc	r22, r1
 8c8:	71 05       	cpc	r23, r1
 8ca:	08 95       	ret
 8cc:	9b 01       	movw	r18, r22
 8ce:	ac 01       	movw	r20, r24
 8d0:	0a 2e       	mov	r0, r26
 8d2:	06 94       	lsr	r0
 8d4:	57 95       	ror	r21
 8d6:	47 95       	ror	r20
 8d8:	37 95       	ror	r19
 8da:	27 95       	ror	r18
 8dc:	ba 95       	dec	r27
 8de:	c9 f7       	brne	.-14     	; 0x8d2 <__ultoa_invert+0xa2>
 8e0:	62 0f       	add	r22, r18
 8e2:	73 1f       	adc	r23, r19
 8e4:	84 1f       	adc	r24, r20
 8e6:	95 1f       	adc	r25, r21
 8e8:	a0 1d       	adc	r26, r0
 8ea:	08 95       	ret

000008ec <__prologue_saves__>:
 8ec:	2f 92       	push	r2
 8ee:	3f 92       	push	r3
 8f0:	4f 92       	push	r4
 8f2:	5f 92       	push	r5
 8f4:	6f 92       	push	r6
 8f6:	7f 92       	push	r7
 8f8:	8f 92       	push	r8
 8fa:	9f 92       	push	r9
 8fc:	af 92       	push	r10
 8fe:	bf 92       	push	r11
 900:	cf 92       	push	r12
 902:	df 92       	push	r13
 904:	ef 92       	push	r14
 906:	ff 92       	push	r15
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	cd b7       	in	r28, 0x3d	; 61
 912:	de b7       	in	r29, 0x3e	; 62
 914:	ca 1b       	sub	r28, r26
 916:	db 0b       	sbc	r29, r27
 918:	cd bf       	out	0x3d, r28	; 61
 91a:	de bf       	out	0x3e, r29	; 62
 91c:	09 94       	ijmp

0000091e <__epilogue_restores__>:
 91e:	2a 88       	ldd	r2, Y+18	; 0x12
 920:	39 88       	ldd	r3, Y+17	; 0x11
 922:	48 88       	ldd	r4, Y+16	; 0x10
 924:	5f 84       	ldd	r5, Y+15	; 0x0f
 926:	6e 84       	ldd	r6, Y+14	; 0x0e
 928:	7d 84       	ldd	r7, Y+13	; 0x0d
 92a:	8c 84       	ldd	r8, Y+12	; 0x0c
 92c:	9b 84       	ldd	r9, Y+11	; 0x0b
 92e:	aa 84       	ldd	r10, Y+10	; 0x0a
 930:	b9 84       	ldd	r11, Y+9	; 0x09
 932:	c8 84       	ldd	r12, Y+8	; 0x08
 934:	df 80       	ldd	r13, Y+7	; 0x07
 936:	ee 80       	ldd	r14, Y+6	; 0x06
 938:	fd 80       	ldd	r15, Y+5	; 0x05
 93a:	0c 81       	ldd	r16, Y+4	; 0x04
 93c:	1b 81       	ldd	r17, Y+3	; 0x03
 93e:	aa 81       	ldd	r26, Y+2	; 0x02
 940:	b9 81       	ldd	r27, Y+1	; 0x01
 942:	ce 0f       	add	r28, r30
 944:	d1 1d       	adc	r29, r1
 946:	cd bf       	out	0x3d, r28	; 61
 948:	de bf       	out	0x3e, r29	; 62
 94a:	ed 01       	movw	r28, r26
 94c:	08 95       	ret

0000094e <_exit>:
 94e:	f8 94       	cli

00000950 <__stop_program>:
 950:	ff cf       	rjmp	.-2      	; 0x950 <__stop_program>
