
Excercise 2 - Smart Device.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  000004b2  00000546  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00802804  00802804  0000054a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003014  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000237d  00000000  00000000  00003618  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047f  00000000  00000000  00005995  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00005e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016c5  00000000  00000000  00005f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c7  00000000  00000000  00007615  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000078dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_23>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_29>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a4 e0       	ldi	r26, 0x04	; 4
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	ae 30       	cpi	r26, 0x0E	; 14
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>

000000ac <__do_copy_data>:
  ac:	18 e2       	ldi	r17, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	e2 eb       	ldi	r30, 0xB2	; 178
  b4:	f4 e0       	ldi	r31, 0x04	; 4
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>
  c2:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  c6:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_9>:
	PORTD.OUT |= left_turn;		// Stop turning left
	PORTD.OUTCLR |= forward;	// Start moving
	
}

ISR(TCA0_CMP0_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	8f 93       	push	r24
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
	TCA0.SINGLE.CTRLA = 0;
  e2:	e0 e0       	ldi	r30, 0x00	; 0
  e4:	fa e0       	ldi	r31, 0x0A	; 10
  e6:	10 82       	st	Z, r1
	intflags = TCA0.SINGLE.INTFLAGS;
  e8:	83 85       	ldd	r24, Z+11	; 0x0b
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	20 93 0c 28 	sts	0x280C, r18	; 0x80280c <intflags>
  f2:	30 93 0d 28 	sts	0x280D, r19	; 0x80280d <intflags+0x1>
	TCA0.SINGLE.INTFLAGS = intflags;
  f6:	83 87       	std	Z+11, r24	; 0x0b
	
	PORTD.OUT |= 3;				// Stop turning
  f8:	e0 e6       	ldi	r30, 0x60	; 96
  fa:	f4 e0       	ldi	r31, 0x04	; 4
  fc:	84 81       	ldd	r24, Z+4	; 0x04
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUTCLR |= forward;	// Start moving
 102:	86 81       	ldd	r24, Z+6	; 0x06
 104:	81 60       	ori	r24, 0x01	; 1
 106:	86 83       	std	Z+6, r24	; 0x06
}
 108:	ff 91       	pop	r31
 10a:	ef 91       	pop	r30
 10c:	8f 91       	pop	r24
 10e:	3f 91       	pop	r19
 110:	2f 91       	pop	r18
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <initialize_ADC>:

// Initialize the ADC for Free-Running mode
initialize_ADC(){
		ADC0.CTRLA |= ADC_RESSEL_10BIT_gc;	// 10-bit resolution
 11c:	e0 e0       	ldi	r30, 0x00	; 0
 11e:	f6 e0       	ldi	r31, 0x06	; 6
 120:	80 81       	ld	r24, Z
 122:	80 83       	st	Z, r24
		ADC0.CTRLA |= ADC_FREERUN_bm;		// Free-Running mode enabled
 124:	80 81       	ld	r24, Z
 126:	82 60       	ori	r24, 0x02	; 2
 128:	80 83       	st	Z, r24
		ADC0.CTRLA |= ADC_ENABLE_bm;		// Enable ADC
 12a:	80 81       	ld	r24, Z
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24
		ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc;	// The bit
 130:	86 81       	ldd	r24, Z+6	; 0x06
 132:	87 60       	ori	r24, 0x07	; 7
 134:	86 83       	std	Z+6, r24	; 0x06
		ADC0.DBGCTRL |= ADC_DBGRUN_bm;		// Enable Debug Mode
 136:	84 85       	ldd	r24, Z+12	; 0x0c
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	84 87       	std	Z+12, r24	; 0x0c
		// Window Comparator Mode
		ADC0.WINLT |= 24; // Set threshold
 13c:	82 89       	ldd	r24, Z+18	; 0x12
 13e:	93 89       	ldd	r25, Z+19	; 0x13
 140:	88 61       	ori	r24, 0x18	; 24
 142:	82 8b       	std	Z+18, r24	; 0x12
 144:	93 8b       	std	Z+19, r25	; 0x13
		ADC0.INTCTRL |= ADC_WCMP_bm; // Enable Interrupts for WCM
 146:	82 85       	ldd	r24, Z+10	; 0x0a
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	82 87       	std	Z+10, r24	; 0x0a
		ADC0.CTRLE |= ADC_WINCM0_bm; // Interrupt when Result < WINLT
 14c:	84 81       	ldd	r24, Z+4	; 0x04
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	84 83       	std	Z+4, r24	; 0x04
}
 152:	08 95       	ret

00000154 <initialize_Timer>:

// Initialize timer
initialize_Timer(int duration){
		TCA0.SINGLE.CNT = 0;								// Clear counter
 154:	e0 e0       	ldi	r30, 0x00	; 0
 156:	fa e0       	ldi	r31, 0x0A	; 10
 158:	10 a2       	std	Z+32, r1	; 0x20
 15a:	11 a2       	std	Z+33, r1	; 0x21
		TCA0.SINGLE.CTRLB = 0;								// Normal mode (counter)
 15c:	11 82       	std	Z+1, r1	; 0x01
		TCA0.SINGLE.CMP0 = duration;						// When counter reaches this value -> interrupt clock frequency/1024
 15e:	80 a7       	std	Z+40, r24	; 0x28
 160:	91 a7       	std	Z+41, r25	; 0x29
		TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc;	// Frequency of counter
 162:	8e e0       	ldi	r24, 0x0E	; 14
 164:	80 83       	st	Z, r24
		TCA0.SINGLE.CTRLA |= 1;								// Enable
 166:	80 81       	ld	r24, Z
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	80 83       	st	Z, r24
		TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm;			// Interrupt Enable for counter
 16c:	80 e1       	ldi	r24, 0x10	; 16
 16e:	82 87       	std	Z+10, r24	; 0x0a
 170:	08 95       	ret

00000172 <main>:
int wall_right = 0;
int intflags;
int turning;


int main(){
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
	PORTD.DIR |= 7;		// Pin 0, Pin 1, Pin 2 are outputs
 176:	c0 e6       	ldi	r28, 0x60	; 96
 178:	d4 e0       	ldi	r29, 0x04	; 4
 17a:	88 81       	ld	r24, Y
 17c:	87 60       	ori	r24, 0x07	; 7
 17e:	88 83       	st	Y, r24
	initialize_ADC();	// Initialize ADC for Free Running Mode
 180:	0e 94 8e 00 	call	0x11c	; 0x11c <initialize_ADC>
	sei();				// Enable interrupts
 184:	78 94       	sei
	
	PORTD.OUT = 2;					// Only led 0 is on => Moving forward
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	8c 83       	std	Y+4, r24	; 0x04
	ADC0.COMMAND |= ADC_STCONV_bm;	// Start Conversion
 18a:	e0 e0       	ldi	r30, 0x00	; 0
 18c:	f6 e0       	ldi	r31, 0x06	; 6
 18e:	80 85       	ldd	r24, Z+8	; 0x08
 190:	81 60       	ori	r24, 0x01	; 1
 192:	80 87       	std	Z+8, r24	; 0x08
	
	while(corner_cnt < 8){
 194:	2d c0       	rjmp	.+90     	; 0x1f0 <main+0x7e>
		// Wait until the device is done turning
		if(turning)
 196:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <turning>
 19a:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <turning+0x1>
 19e:	89 2b       	or	r24, r25
 1a0:	39 f5       	brne	.+78     	; 0x1f0 <main+0x7e>
			continue;	// Skip to next iteration of while
			
		wall_right = rand()%1;			// Check if there's a wall on the right
 1a2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <rand>
 1a6:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <__data_end>
 1aa:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <__data_end+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	83 ef       	ldi	r24, 0xF3	; 243
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x40>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x46>
 1b8:	00 00       	nop
		_delay_ms(2);
		if(!wall_right){
 1ba:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
 1be:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <__data_end+0x1>
 1c2:	89 2b       	or	r24, r25
 1c4:	a9 f4       	brne	.+42     	; 0x1f0 <main+0x7e>
			PORTD.OUT |= forward;			// Stop moving
 1c6:	e0 e6       	ldi	r30, 0x60	; 96
 1c8:	f4 e0       	ldi	r31, 0x04	; 4
 1ca:	84 81       	ldd	r24, Z+4	; 0x04
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	84 83       	std	Z+4, r24	; 0x04
			PORTD.OUTCLR |= right_turn;		// Turn right
 1d0:	86 81       	ldd	r24, Z+6	; 0x06
 1d2:	82 60       	ori	r24, 0x02	; 2
 1d4:	86 83       	std	Z+6, r24	; 0x06
			initialize_Timer(time_to_turn);	
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 aa 00 	call	0x154	; 0x154 <initialize_Timer>
			corner_cnt ++;
 1de:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <corner_cnt>
 1e2:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <corner_cnt+0x1>
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <corner_cnt>
 1ec:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <corner_cnt+0x1>
	sei();				// Enable interrupts
	
	PORTD.OUT = 2;					// Only led 0 is on => Moving forward
	ADC0.COMMAND |= ADC_STCONV_bm;	// Start Conversion
	
	while(corner_cnt < 8){
 1f0:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <corner_cnt>
 1f4:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <corner_cnt+0x1>
 1f8:	08 97       	sbiw	r24, 0x08	; 8
 1fa:	6c f2       	brlt	.-102    	; 0x196 <main+0x24>
			PORTD.OUTCLR |= right_turn;		// Turn right
			initialize_Timer(time_to_turn);	
			corner_cnt ++;
		}
	}
	PORTD.OUT |= 3; // Turn off all leds
 1fc:	e0 e6       	ldi	r30, 0x60	; 96
 1fe:	f4 e0       	ldi	r31, 0x04	; 4
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	83 60       	ori	r24, 0x03	; 3
 204:	84 83       	std	Z+4, r24	; 0x04
	cli();
 206:	f8 94       	cli
}
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <__vector_23>:

ISR(ADC0_WCOMP_vect){
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
	intflags = ADC0.INTFLAGS;
 234:	e0 e0       	ldi	r30, 0x00	; 0
 236:	f6 e0       	ldi	r31, 0x06	; 6
 238:	83 85       	ldd	r24, Z+11	; 0x0b
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	20 93 0c 28 	sts	0x280C, r18	; 0x80280c <intflags>
 242:	30 93 0d 28 	sts	0x280D, r19	; 0x80280d <intflags+0x1>
	ADC0.INTFLAGS = intflags;
 246:	83 87       	std	Z+11, r24	; 0x0b

	PORTD.OUT |= forward;			// Stop moving
 248:	e0 e6       	ldi	r30, 0x60	; 96
 24a:	f4 e0       	ldi	r31, 0x04	; 4
 24c:	84 81       	ldd	r24, Z+4	; 0x04
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	84 83       	std	Z+4, r24	; 0x04
	
	if(backtrack == 0)
 252:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <backtrack>
 256:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <backtrack+0x1>
 25a:	89 2b       	or	r24, r25
 25c:	21 f4       	brne	.+8      	; 0x266 <__vector_23+0x54>
		PORTD.OUTCLR |= left_turn;	// Turn left
 25e:	86 81       	ldd	r24, Z+6	; 0x06
 260:	84 60       	ori	r24, 0x04	; 4
 262:	86 83       	std	Z+6, r24	; 0x06
 264:	05 c0       	rjmp	.+10     	; 0x270 <__vector_23+0x5e>
	else
		PORTD.OUTCLR |= right_turn;	// Turn right
 266:	e0 e6       	ldi	r30, 0x60	; 96
 268:	f4 e0       	ldi	r31, 0x04	; 4
 26a:	86 81       	ldd	r24, Z+6	; 0x06
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	86 83       	std	Z+6, r24	; 0x06
		
	initialize_Timer(time_to_turn);
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 aa 00 	call	0x154	; 0x154 <initialize_Timer>
	corner_cnt ++;
 278:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <corner_cnt>
 27c:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <corner_cnt+0x1>
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	80 93 08 28 	sts	0x2808, r24	; 0x802808 <corner_cnt>
 286:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <corner_cnt+0x1>
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <__vector_29>:


ISR (PORTF_PORT_vect){
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	6f 93       	push	r22
 2c0:	7f 93       	push	r23
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	af 93       	push	r26
 2c8:	bf 93       	push	r27
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
	intflags = PORTF.INTFLAGS;
 2d2:	e0 ea       	ldi	r30, 0xA0	; 160
 2d4:	f4 e0       	ldi	r31, 0x04	; 4
 2d6:	81 85       	ldd	r24, Z+9	; 0x09
 2d8:	28 2f       	mov	r18, r24
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	20 93 0c 28 	sts	0x280C, r18	; 0x80280c <intflags>
 2e0:	30 93 0d 28 	sts	0x280D, r19	; 0x80280d <intflags+0x1>
	PORTF.INTFLAGS = intflags;
 2e4:	81 87       	std	Z+9, r24	; 0x09
	
	PORTD.OUT |= forward;		// Stop moving
 2e6:	c0 e6       	ldi	r28, 0x60	; 96
 2e8:	d4 e0       	ldi	r29, 0x04	; 4
 2ea:	8c 81       	ldd	r24, Y+4	; 0x04
 2ec:	81 60       	ori	r24, 0x01	; 1
 2ee:	8c 83       	std	Y+4, r24	; 0x04
	PORTD.OUTCLR |= left_turn;	// Turn left twice
 2f0:	8e 81       	ldd	r24, Y+6	; 0x06
 2f2:	84 60       	ori	r24, 0x04	; 4
 2f4:	8e 83       	std	Y+6, r24	; 0x06
	initialize_Timer(2*time_to_turn);
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 aa 00 	call	0x154	; 0x154 <initialize_Timer>
	PORTD.OUT |= left_turn;		// Stop turning left
 2fe:	8c 81       	ldd	r24, Y+4	; 0x04
 300:	84 60       	ori	r24, 0x04	; 4
 302:	8c 83       	std	Y+4, r24	; 0x04
	PORTD.OUTCLR |= forward;	// Start moving
 304:	8e 81       	ldd	r24, Y+6	; 0x06
 306:	81 60       	ori	r24, 0x01	; 1
 308:	8e 83       	std	Y+6, r24	; 0x06
	
}
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <do_rand>:
 330:	8f 92       	push	r8
 332:	9f 92       	push	r9
 334:	af 92       	push	r10
 336:	bf 92       	push	r11
 338:	cf 92       	push	r12
 33a:	df 92       	push	r13
 33c:	ef 92       	push	r14
 33e:	ff 92       	push	r15
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	ec 01       	movw	r28, r24
 346:	68 81       	ld	r22, Y
 348:	79 81       	ldd	r23, Y+1	; 0x01
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	9b 81       	ldd	r25, Y+3	; 0x03
 34e:	61 15       	cp	r22, r1
 350:	71 05       	cpc	r23, r1
 352:	81 05       	cpc	r24, r1
 354:	91 05       	cpc	r25, r1
 356:	21 f4       	brne	.+8      	; 0x360 <do_rand+0x30>
 358:	64 e2       	ldi	r22, 0x24	; 36
 35a:	79 ed       	ldi	r23, 0xD9	; 217
 35c:	8b e5       	ldi	r24, 0x5B	; 91
 35e:	97 e0       	ldi	r25, 0x07	; 7
 360:	2d e1       	ldi	r18, 0x1D	; 29
 362:	33 ef       	ldi	r19, 0xF3	; 243
 364:	41 e0       	ldi	r20, 0x01	; 1
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__divmodsi4>
 36c:	49 01       	movw	r8, r18
 36e:	5a 01       	movw	r10, r20
 370:	9b 01       	movw	r18, r22
 372:	ac 01       	movw	r20, r24
 374:	a7 ea       	ldi	r26, 0xA7	; 167
 376:	b1 e4       	ldi	r27, 0x41	; 65
 378:	0e 94 13 02 	call	0x426	; 0x426 <__muluhisi3>
 37c:	6b 01       	movw	r12, r22
 37e:	7c 01       	movw	r14, r24
 380:	ac ee       	ldi	r26, 0xEC	; 236
 382:	b4 ef       	ldi	r27, 0xF4	; 244
 384:	a5 01       	movw	r20, r10
 386:	94 01       	movw	r18, r8
 388:	0e 94 21 02 	call	0x442	; 0x442 <__mulohisi3>
 38c:	dc 01       	movw	r26, r24
 38e:	cb 01       	movw	r24, r22
 390:	8c 0d       	add	r24, r12
 392:	9d 1d       	adc	r25, r13
 394:	ae 1d       	adc	r26, r14
 396:	bf 1d       	adc	r27, r15
 398:	b7 ff       	sbrs	r27, 7
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <do_rand+0x72>
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	a1 09       	sbc	r26, r1
 3a0:	b0 48       	sbci	r27, 0x80	; 128
 3a2:	88 83       	st	Y, r24
 3a4:	99 83       	std	Y+1, r25	; 0x01
 3a6:	aa 83       	std	Y+2, r26	; 0x02
 3a8:	bb 83       	std	Y+3, r27	; 0x03
 3aa:	9f 77       	andi	r25, 0x7F	; 127
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	df 90       	pop	r13
 3b6:	cf 90       	pop	r12
 3b8:	bf 90       	pop	r11
 3ba:	af 90       	pop	r10
 3bc:	9f 90       	pop	r9
 3be:	8f 90       	pop	r8
 3c0:	08 95       	ret

000003c2 <rand_r>:
 3c2:	0e 94 98 01 	call	0x330	; 0x330 <do_rand>
 3c6:	08 95       	ret

000003c8 <rand>:
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	98 e2       	ldi	r25, 0x28	; 40
 3cc:	0e 94 98 01 	call	0x330	; 0x330 <do_rand>
 3d0:	08 95       	ret

000003d2 <srand>:
 3d2:	a0 e0       	ldi	r26, 0x00	; 0
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 3da:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 3de:	a0 93 02 28 	sts	0x2802, r26	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
 3e2:	b0 93 03 28 	sts	0x2803, r27	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
 3e6:	08 95       	ret

000003e8 <__divmodsi4>:
 3e8:	05 2e       	mov	r0, r21
 3ea:	97 fb       	bst	r25, 7
 3ec:	1e f4       	brtc	.+6      	; 0x3f4 <__divmodsi4+0xc>
 3ee:	00 94       	com	r0
 3f0:	0e 94 0b 02 	call	0x416	; 0x416 <__negsi2>
 3f4:	57 fd       	sbrc	r21, 7
 3f6:	07 d0       	rcall	.+14     	; 0x406 <__divmodsi4_neg2>
 3f8:	0e 94 26 02 	call	0x44c	; 0x44c <__udivmodsi4>
 3fc:	07 fc       	sbrc	r0, 7
 3fe:	03 d0       	rcall	.+6      	; 0x406 <__divmodsi4_neg2>
 400:	4e f4       	brtc	.+18     	; 0x414 <__divmodsi4_exit>
 402:	0c 94 0b 02 	jmp	0x416	; 0x416 <__negsi2>

00000406 <__divmodsi4_neg2>:
 406:	50 95       	com	r21
 408:	40 95       	com	r20
 40a:	30 95       	com	r19
 40c:	21 95       	neg	r18
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
 410:	4f 4f       	sbci	r20, 0xFF	; 255
 412:	5f 4f       	sbci	r21, 0xFF	; 255

00000414 <__divmodsi4_exit>:
 414:	08 95       	ret

00000416 <__negsi2>:
 416:	90 95       	com	r25
 418:	80 95       	com	r24
 41a:	70 95       	com	r23
 41c:	61 95       	neg	r22
 41e:	7f 4f       	sbci	r23, 0xFF	; 255
 420:	8f 4f       	sbci	r24, 0xFF	; 255
 422:	9f 4f       	sbci	r25, 0xFF	; 255
 424:	08 95       	ret

00000426 <__muluhisi3>:
 426:	0e 94 48 02 	call	0x490	; 0x490 <__umulhisi3>
 42a:	a5 9f       	mul	r26, r21
 42c:	90 0d       	add	r25, r0
 42e:	b4 9f       	mul	r27, r20
 430:	90 0d       	add	r25, r0
 432:	a4 9f       	mul	r26, r20
 434:	80 0d       	add	r24, r0
 436:	91 1d       	adc	r25, r1
 438:	11 24       	eor	r1, r1
 43a:	08 95       	ret

0000043c <__mulshisi3>:
 43c:	b7 ff       	sbrs	r27, 7
 43e:	0c 94 13 02 	jmp	0x426	; 0x426 <__muluhisi3>

00000442 <__mulohisi3>:
 442:	0e 94 13 02 	call	0x426	; 0x426 <__muluhisi3>
 446:	82 1b       	sub	r24, r18
 448:	93 0b       	sbc	r25, r19
 44a:	08 95       	ret

0000044c <__udivmodsi4>:
 44c:	a1 e2       	ldi	r26, 0x21	; 33
 44e:	1a 2e       	mov	r1, r26
 450:	aa 1b       	sub	r26, r26
 452:	bb 1b       	sub	r27, r27
 454:	fd 01       	movw	r30, r26
 456:	0d c0       	rjmp	.+26     	; 0x472 <__udivmodsi4_ep>

00000458 <__udivmodsi4_loop>:
 458:	aa 1f       	adc	r26, r26
 45a:	bb 1f       	adc	r27, r27
 45c:	ee 1f       	adc	r30, r30
 45e:	ff 1f       	adc	r31, r31
 460:	a2 17       	cp	r26, r18
 462:	b3 07       	cpc	r27, r19
 464:	e4 07       	cpc	r30, r20
 466:	f5 07       	cpc	r31, r21
 468:	20 f0       	brcs	.+8      	; 0x472 <__udivmodsi4_ep>
 46a:	a2 1b       	sub	r26, r18
 46c:	b3 0b       	sbc	r27, r19
 46e:	e4 0b       	sbc	r30, r20
 470:	f5 0b       	sbc	r31, r21

00000472 <__udivmodsi4_ep>:
 472:	66 1f       	adc	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	88 1f       	adc	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	1a 94       	dec	r1
 47c:	69 f7       	brne	.-38     	; 0x458 <__udivmodsi4_loop>
 47e:	60 95       	com	r22
 480:	70 95       	com	r23
 482:	80 95       	com	r24
 484:	90 95       	com	r25
 486:	9b 01       	movw	r18, r22
 488:	ac 01       	movw	r20, r24
 48a:	bd 01       	movw	r22, r26
 48c:	cf 01       	movw	r24, r30
 48e:	08 95       	ret

00000490 <__umulhisi3>:
 490:	a2 9f       	mul	r26, r18
 492:	b0 01       	movw	r22, r0
 494:	b3 9f       	mul	r27, r19
 496:	c0 01       	movw	r24, r0
 498:	a3 9f       	mul	r26, r19
 49a:	70 0d       	add	r23, r0
 49c:	81 1d       	adc	r24, r1
 49e:	11 24       	eor	r1, r1
 4a0:	91 1d       	adc	r25, r1
 4a2:	b2 9f       	mul	r27, r18
 4a4:	70 0d       	add	r23, r0
 4a6:	81 1d       	adc	r24, r1
 4a8:	11 24       	eor	r1, r1
 4aa:	91 1d       	adc	r25, r1
 4ac:	08 95       	ret

000004ae <_exit>:
 4ae:	f8 94       	cli

000004b0 <__stop_program>:
 4b0:	ff cf       	rjmp	.-2      	; 0x4b0 <__stop_program>
